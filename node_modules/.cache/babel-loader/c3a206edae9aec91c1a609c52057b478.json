{"ast":null,"code":"var _jsxFileName = \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/DepositStakeTxForm.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../../components/FormField';\nimport { formatNativeTokenAmountToLargestUnit, isHolderSummary, isValidAmount, numberWithCommas, toNativeTokenLargestUnit } from '../../utils/Utils';\nimport { DDropAsset, DTokenAsset, DneroAsset } from '../../constants/assets';\nimport { getMaxDelegatedStakeAmount, getMaxStakeAmount, getMinStakeAmount, StakePurposeForDDROP } from '../../constants';\nimport FlatButton from \"../buttons/FlatButton\";\nimport BigNumber from \"bignumber.js\";\nexport default function DepositStakeTxForm(props) {\n  const {\n    onSubmit,\n    defaultValues,\n    formRef,\n    selectedAccount,\n    assets,\n    chainId,\n    onShowDelegatedSentryNodes\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    setValue\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: defaultValues || {\n      purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n      holder: '',\n      holderSummary: '',\n      amount: '',\n      delegatedSentryNode: null\n    }\n  });\n  React.useEffect(() => {\n    register('delegatedSentryNode');\n  }, [register]);\n  const purpose = parseInt(watch('purpose'));\n  const delegatedSentryNode = watch('delegatedSentryNode');\n  let holderTitle = null;\n  let holderPlaceholder = null;\n  let stakeAmountTitle = null;\n\n  if (purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n    holderTitle = 'Validator Node Holder (Address)';\n    holderPlaceholder = 'Enter validator node address';\n    stakeAmountTitle = 'Dnero Stake Amount';\n  } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry) {\n    holderTitle = 'Sentry Node Holder (Summary)';\n    holderPlaceholder = 'Enter sentry node summary';\n    stakeAmountTitle = 'Dnero Stake Amount';\n  } else if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n    holderTitle = 'Edge Node Holder (Summary)';\n    holderPlaceholder = 'Enter edge node summary';\n    stakeAmountTitle = 'DToken Stake Amount';\n  } else if (purpose === StakePurposeForDDROP) {\n    holderTitle = null;\n    holderPlaceholder = null;\n    stakeAmountTitle = 'DDrop Stake Amount';\n  }\n\n  const populateMaxAmount = () => {\n    let amount = '';\n    let max = getMaxStakeAmount(purpose);\n\n    if (purpose === dnerojs.constants.StakePurpose.StakeForValidator || purpose === dnerojs.constants.StakePurpose.StakeForSentry) {\n      amount = toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);\n\n      if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n        amount = Math.min(max, parseFloat(amount));\n      } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry || !_.isNil(delegatedSentryNode)) {\n        max = getMaxDelegatedStakeAmount(purpose);\n        amount = Math.min(max, parseFloat(amount));\n      }\n    } else if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n      const maxDtokenBN = new BigNumber(selectedAccount.balances['dtokenwei']).minus(dnerojs.constants.gasPriceDefault);\n      amount = toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);\n      amount = Math.min(max, parseFloat(amount));\n    } else if (purpose === StakePurposeForDDROP) {\n      const dDropAsset = DDropAsset(chainId);\n      const balance = selectedAccount.balances[dDropAsset.address] || '0';\n      amount = toNativeTokenLargestUnit(balance).toString(10);\n    }\n\n    setValue('amount', amount);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: 'TxForm TxForm--DepositStake',\n    onSubmit: handleSubmit(onSubmit),\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    title: 'Stake Type',\n    error: errors.purpose && 'Stake type is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: 'RoundedInput',\n    name: 'purpose',\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: '__placeholder__',\n    value: '',\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, \"Select stake type\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'sentry',\n    value: dnerojs.constants.StakePurpose.StakeForSentry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"Sentry Node\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'validator',\n    value: dnerojs.constants.StakePurpose.StakeForValidator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"Validator Node\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'elite-edge',\n    value: dnerojs.constants.StakePurpose.StakeForEliteEdge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, \"Edge Node\"), DDropAsset(chainId) && /*#__PURE__*/React.createElement(\"option\", {\n    key: 'ddrop',\n    value: StakePurposeForDDROP,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, \"DDROP\"))), purpose === dnerojs.constants.StakePurpose.StakeForValidator && /*#__PURE__*/React.createElement(FormField, {\n    title: holderTitle,\n    error: errors.holder && 'A valid validator address is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"holder\",\n    className: 'RoundedInput',\n    placeholder: holderPlaceholder,\n    ref: register({\n      required: true,\n      validate: s => ethers.utils.isAddress(s)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  })), purpose === dnerojs.constants.StakePurpose.StakeForSentry && /*#__PURE__*/React.createElement(FormField, {\n    title: delegatedSentryNode ? 'Delegated Sentry Node' : holderTitle,\n    error: errors.holderSummary && 'Sentry node summary or delegated sentry node is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"holderSummary\",\n    className: 'RoundedInput',\n    style: {\n      height: 100,\n      display: delegatedSentryNode ? 'none' : 'block'\n    },\n    placeholder: holderPlaceholder,\n    ref: register({\n      required: true,\n      validate: s => isHolderSummary(s)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }), _.isNil(delegatedSentryNode) && /*#__PURE__*/React.createElement(\"a\", {\n    onClick: () => {\n      onShowDelegatedSentryNodes(node => {\n        setValue('holderSummary', node.node_summary);\n        setValue('delegatedSentryNode', node);\n      });\n    },\n    className: 'Link',\n    style: {\n      marginTop: 8,\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  }, \"Select Delegated Sentry Node\")), !_.isNil(delegatedSentryNode) && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'RoundedInput',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'RoundedInputClearableValue',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 37\n    }\n  }, delegatedSentryNode.name), /*#__PURE__*/React.createElement(\"a\", {\n    onClick: () => {\n      setValue('holderSummary', null);\n      setValue('delegatedSentryNode', null);\n    },\n    style: {\n      marginLeft: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: '/img/icons/alert-x@2x.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 41\n    }\n  })))))), purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge && /*#__PURE__*/React.createElement(FormField, {\n    title: holderTitle,\n    error: errors.holderSummary && 'Edge node summary is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"holderSummary\",\n    className: 'RoundedInput',\n    style: {\n      height: 100\n    },\n    placeholder: holderPlaceholder,\n    ref: register({\n      required: true,\n      validate: s => dnerojs.transactions.DepositStakeV2Transaction.isValidHolderSummary(purpose, s)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    title: stakeAmountTitle,\n    error: errors.amount && errors.amount.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'RoundedInputWrapper',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"amount\",\n    className: 'RoundedInput',\n    placeholder: 'Enter amount to stake',\n    ref: register({\n      required: {\n        value: true,\n        message: 'Stake amount is required'\n      },\n      validate: {\n        sufficientBalance: s => {\n          let isValid = true;\n\n          if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n            isValid = isValidAmount(selectedAccount, DTokenAsset, s);\n          } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry || purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n            isValid = isValidAmount(selectedAccount, DneroAsset, s);\n          } else if (purpose === StakePurposeForDDROP) {\n            const dDropAsset = DDropAsset(chainId);\n            isValid = isValidAmount(selectedAccount, dDropAsset, s);\n          }\n\n          return isValid ? true : 'Insufficient balance';\n        },\n        moreThanMin: s => {\n          const f = parseFloat(s);\n          const min = getMinStakeAmount(purpose);\n\n          if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n            if (min > f) {\n              return `Invalid amount. Must be at least ${numberWithCommas(min)} DTOKEN`;\n            }\n          } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry || purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n            if (min > f) {\n              return `Invalid amount. Must be at least ${numberWithCommas(min)} DNERO`;\n            }\n          }\n\n          return true;\n        },\n        lessThanMax: s => {\n          const f = parseFloat(s);\n          let max = getMaxStakeAmount(purpose);\n\n          if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n            if (max < f) {\n              return `Invalid amount. Must be less than ${numberWithCommas(max)} DTOKEN`;\n            }\n          } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry || !_.isNil(delegatedSentryNode)) {\n            max = getMaxDelegatedStakeAmount(purpose);\n\n            if (max < f) {\n              return `Invalid amount. There's a max of ${numberWithCommas(max)} DNERO for delegated nodes. Please download and run your own Sentry Node to stake more.`;\n            }\n          }\n\n          return true;\n        },\n        moreThanZero: s => {\n          const f = parseFloat(s);\n          return f > 0 ? true : 'Invalid stake amount';\n        }\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FlatButton, {\n    title: 'Max',\n    size: 'small',\n    className: 'RoundedInputButton',\n    onClick: populateMaxAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 24\n    }\n  }))));\n}\n\n__signature__(DepositStakeTxForm, \"useForm{{register, handleSubmit, errors, watch, setValue}}\\nuseEffect{}\", () => [useForm]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DepositStakeTxForm, \"DepositStakeTxForm\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/DepositStakeTxForm.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["_","React","useForm","ethers","dnerojs","FormField","formatNativeTokenAmountToLargestUnit","isHolderSummary","isValidAmount","numberWithCommas","toNativeTokenLargestUnit","DDropAsset","DTokenAsset","DneroAsset","getMaxDelegatedStakeAmount","getMaxStakeAmount","getMinStakeAmount","StakePurposeForDDROP","FlatButton","BigNumber","DepositStakeTxForm","props","onSubmit","defaultValues","formRef","selectedAccount","assets","chainId","onShowDelegatedSentryNodes","register","handleSubmit","errors","watch","setValue","mode","purpose","constants","StakePurpose","StakeForSentry","holder","holderSummary","amount","delegatedSentryNode","useEffect","parseInt","holderTitle","holderPlaceholder","stakeAmountTitle","StakeForValidator","StakeForEliteEdge","populateMaxAmount","max","balances","toString","Math","min","parseFloat","isNil","maxDtokenBN","minus","gasPriceDefault","dDropAsset","balance","address","required","validate","s","utils","isAddress","height","display","node","node_summary","marginTop","textAlign","name","marginLeft","transactions","DepositStakeV2Transaction","isValidHolderSummary","message","value","sufficientBalance","isValid","moreThanMin","f","lessThanMax","moreThanZero"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/DepositStakeTxForm.js"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../../components/FormField';\nimport {\n    formatNativeTokenAmountToLargestUnit,\n    isHolderSummary,\n    isValidAmount,\n    numberWithCommas, toNativeTokenLargestUnit\n} from '../../utils/Utils';\nimport {DDropAsset, DTokenAsset, DneroAsset} from '../../constants/assets';\nimport {getMaxDelegatedStakeAmount, getMaxStakeAmount, getMinStakeAmount, StakePurposeForDDROP} from '../../constants';\nimport FlatButton from \"../buttons/FlatButton\";\nimport BigNumber from \"bignumber.js\";\n\nexport default function DepositStakeTxForm(props) {\n    const {onSubmit, defaultValues, formRef, selectedAccount, assets, chainId, onShowDelegatedSentryNodes} = props;\n    const {register, handleSubmit, errors, watch, setValue} = useForm({\n        mode: 'onChange',\n        defaultValues: defaultValues || {\n            purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n            holder: '',\n            holderSummary: '',\n            amount: '',\n            delegatedSentryNode: null\n        }\n    });\n    React.useEffect(() => {\n        register('delegatedSentryNode');\n    }, [register]);\n    const purpose = parseInt(watch('purpose'));\n    const delegatedSentryNode = watch('delegatedSentryNode');\n    let holderTitle = null;\n    let holderPlaceholder = null;\n    let stakeAmountTitle = null;\n\n    if (purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n        holderTitle = 'Validator Node Holder (Address)';\n        holderPlaceholder = 'Enter validator node address';\n        stakeAmountTitle = 'Dnero Stake Amount';\n    } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry) {\n        holderTitle = 'Sentry Node Holder (Summary)';\n        holderPlaceholder = 'Enter sentry node summary';\n        stakeAmountTitle = 'Dnero Stake Amount';\n    } else if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n        holderTitle = 'Edge Node Holder (Summary)';\n        holderPlaceholder = 'Enter edge node summary';\n        stakeAmountTitle = 'DToken Stake Amount';\n    } else if (purpose === StakePurposeForDDROP) {\n        holderTitle = null;\n        holderPlaceholder = null;\n        stakeAmountTitle = 'DDrop Stake Amount';\n    }\n    const populateMaxAmount = () => {\n        let amount = '';\n        let max = getMaxStakeAmount(purpose);\n        if(purpose === dnerojs.constants.StakePurpose.StakeForValidator || purpose === dnerojs.constants.StakePurpose.StakeForSentry){\n            amount = toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);\n\n            if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                amount = Math.min(max, parseFloat(amount));\n            } else if (\n                purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                !_.isNil(delegatedSentryNode)) {\n                max = getMaxDelegatedStakeAmount(purpose);\n                amount = Math.min(max, parseFloat(amount));\n            }\n        }\n        else if(purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge){\n            const maxDtokenBN = (new BigNumber(selectedAccount.balances['dtokenwei'])).minus(dnerojs.constants.gasPriceDefault);\n            amount = toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);\n\n            amount = Math.min(max, parseFloat(amount));\n        }\n        else if(purpose === StakePurposeForDDROP){\n            const dDropAsset = DDropAsset(chainId);\n            const balance = selectedAccount.balances[dDropAsset.address] || '0';\n            amount = toNativeTokenLargestUnit(balance).toString(10);\n        }\n        setValue('amount', amount);\n    }\n\n    return (\n        <form className={'TxForm TxForm--DepositStake'}\n              onSubmit={handleSubmit(onSubmit)}\n              ref={formRef}\n        >\n            <FormField title={'Stake Type'}\n                       error={errors.purpose && 'Stake type is required'}\n            >\n                <select\n                    className={'RoundedInput'}\n                    name={'purpose'}\n                    ref={register({required: true})}\n                >\n                    <option key={'__placeholder__'}\n                            value={''}\n                            disabled>\n                        Select stake type\n                    </option>\n                    <option key={'sentry'}\n                            value={dnerojs.constants.StakePurpose.StakeForSentry}>\n                        Sentry Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForValidator}>\n                        Validator Node\n                    </option>\n                    <option key={'elite-edge'}\n                            value={dnerojs.constants.StakePurpose.StakeForEliteEdge}>\n                        Edge Node\n                    </option>\n                    {\n                        DDropAsset(chainId) &&\n                        <option key={'ddrop'}\n                                value={StakePurposeForDDROP}>\n                            DDROP\n                        </option>\n                    }\n                </select>\n            </FormField>\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForValidator) &&\n                <FormField title={holderTitle}\n                           error={errors.holder && 'A valid validator address is required'}\n                >\n                    <input name=\"holder\"\n                           className={'RoundedInput'}\n                           placeholder={holderPlaceholder}\n                           ref={register({\n                               required: true,\n                               validate: (s) => ethers.utils.isAddress(s)\n                           })}/>\n                </FormField>\n            }\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForSentry) &&\n                <FormField title={(delegatedSentryNode ? 'Delegated Sentry Node' : holderTitle)}\n                           error={errors.holderSummary && 'Sentry node summary or delegated sentry node is required'}\n                >\n                    <React.Fragment>\n                        <textarea name=\"holderSummary\"\n                          className={'RoundedInput'}\n                          style={{height: 100, display: (delegatedSentryNode ? 'none' : 'block')}}\n                          placeholder={holderPlaceholder}\n                          ref={register({\n                              required: true,\n                              validate: (s) => isHolderSummary(s)\n                          })}/>\n                        {\n                            _.isNil(delegatedSentryNode) &&\n                            <a onClick={() => {\n                                onShowDelegatedSentryNodes((node) => {\n                                    setValue('holderSummary', node.node_summary);\n                                    setValue('delegatedSentryNode', node);\n                                });\n                            }}\n                               className={'Link'}\n                               style={{marginTop: 8, textAlign: 'left'}}\n                            >\n                                Select Delegated Sentry Node\n                            </a>\n                        }\n                    </React.Fragment>\n                    {\n                        !_.isNil(delegatedSentryNode) &&\n                        <React.Fragment>\n                            <div className={'RoundedInput'}>\n                                <div className={'RoundedInputClearableValue'}>\n                                    <div>{delegatedSentryNode.name}</div>\n                                    <a onClick={() => {\n                                        setValue('holderSummary', null);\n                                        setValue('delegatedSentryNode', null);\n                                    }}\n                                       style={{marginLeft: 'auto'}}\n                                    >\n                                        <img src={'/img/icons/alert-x@2x.png'}/>\n                                    </a>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                    }\n                </FormField>\n            }\n\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) &&\n                <FormField title={holderTitle}\n                           error={errors.holderSummary && 'Edge node summary is required'}\n                >\n          <textarea name=\"holderSummary\"\n                    className={'RoundedInput'}\n                    style={{height: 100}}\n                    placeholder={holderPlaceholder}\n                    ref={register({\n                        required: true,\n                        validate: (s) => dnerojs.transactions.DepositStakeV2Transaction.isValidHolderSummary(purpose, s)\n                    })}/>\n                </FormField>\n            }\n\n            <FormField title={stakeAmountTitle}\n                       error={errors.amount && errors.amount.message}\n            >\n                <div className={'RoundedInputWrapper'}>\n                    <input name=\"amount\"\n                       className={'RoundedInput'}\n                       placeholder={'Enter amount to stake'}\n                       ref={register({\n                           required: {\n                               value: true,\n                               message: 'Stake amount is required'\n                           },\n                           validate: {\n                               sufficientBalance: (s) => {\n                                   let isValid = true;\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       isValid = isValidAmount(selectedAccount, DTokenAsset, s);\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n                                       isValid = isValidAmount(selectedAccount, DneroAsset, s);\n                                   } else if (purpose === StakePurposeForDDROP) {\n                                       const dDropAsset = DDropAsset(chainId);\n\n                                       isValid = isValidAmount(selectedAccount, dDropAsset, s);\n                                   }\n\n                                   return isValid ? true : 'Insufficient balance';\n                               },\n                               moreThanMin: (s) => {\n                                   const f = parseFloat(s);\n                                   const min = getMinStakeAmount(purpose);\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       if(min > f){\n                                           return `Invalid amount. Must be at least ${numberWithCommas(min)} DTOKEN`;\n                                       }\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n                                       if(min > f){\n                                           return `Invalid amount. Must be at least ${numberWithCommas(min)} DNERO`;\n                                       }\n                                   }\n                                   return true;\n                               },\n                               lessThanMax: (s) => {\n                                   const f = parseFloat(s);\n                                   let max = getMaxStakeAmount(purpose);\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       if(max < f){\n                                           return `Invalid amount. Must be less than ${numberWithCommas(max)} DTOKEN`;\n                                       }\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       !_.isNil(delegatedSentryNode)) {\n                                       max = getMaxDelegatedStakeAmount(purpose);\n                                       if(max < f){\n                                           return `Invalid amount. There's a max of ${numberWithCommas(max)} DNERO for delegated nodes. Please download and run your own Sentry Node to stake more.`;\n                                       }\n                                   }\n                                   return true;\n                               },\n                               moreThanZero: (s) => {\n                                   const f = parseFloat(s);\n\n                                   return (f > 0) ? true : 'Invalid stake amount';\n                               }\n                           }\n                       })}/>\n                       <FlatButton title={'Max'}\n                                   size={'small'}\n                                   className={'RoundedInputButton'}\n                                   onClick={populateMaxAmount}/>\n                </div>\n            </FormField>\n        </form>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}