{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * A Log object\n */\n\nvar id = 0;\nvar subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\n\nvar log = exports.log = function log(type, message, data) {\n  var obj = {\n    type: type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\n\n\nvar listen = exports.listen = function listen(cb) {\n  subscribers.push(cb);\n  return function () {\n    var i = subscribers.indexOf(cb);\n\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log) {\n  for (var i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n} // for debug purpose\n\n\nglobal.__ledgerLogsListen = listen;","map":{"version":3,"sources":["../src/index.js"],"names":["id","subscribers","log","obj","type","String","date","dispatch","listen","i","console","global"],"mappings":";;;;;AAEA;;;;AAaA,IAAIA,EAAAA,GAAJ,CAAA;AACA,IAAMC,WAAAA,GAAN,EAAA;AAEA;;;;;;AAKO,IAAMC,GAAAA,GAAAA,OAAAA,CAAAA,GAAAA,GAAM,SAANA,GAAM,CAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAgD;EACjE,IAAMC,GAAAA,GAAW;IAAEC,IAAAA,EAAF,IAAA;IAAQJ,EAAAA,EAAIK,MAAAA,CAAO,EAAnB,EAAYA,CAAZ;IAA0BC,IAAAA,EAAM,IAAjD,IAAiD;EAAhC,CAAjB;EACA,IAAA,OAAA,EAAaH,GAAAA,CAAAA,OAAAA,GAAAA,OAAAA;EACb,IAAA,IAAA,EAAUA,GAAAA,CAAAA,IAAAA,GAAAA,IAAAA;EACVI,QAAAA,CAAAA,GAAAA,CAAAA;AAJK,CAAA;AAOP;;;;;;;AAKO,IAAMC,MAAAA,GAAAA,OAAAA,CAAAA,MAAAA,GAAS,SAATA,MAAS,CAAA,EAAA,EAAkC;EACtDP,WAAAA,CAAAA,IAAAA,CAAAA,EAAAA;EACA,OAAO,YAAM;IACX,IAAMQ,CAAAA,GAAIR,WAAAA,CAAAA,OAAAA,CAAV,EAAUA,CAAV;;IACA,IAAIQ,CAAAA,KAAM,CAAV,CAAA,EAAc;MACZ;MACAR,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBA,WAAAA,CAAYA,WAAAA,CAAAA,MAAAA,GAA7BA,CAAiBA,CAAjBA;MACAA,WAAAA,CAAAA,GAAAA;IACD;EANH,CAAA;AAFK,CAAA;;AAYP,SAAA,QAAA,CAAA,GAAA,EAA4B;EAC1B,KAAK,IAAIQ,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIR,WAAAA,CAApB,MAAA,EAAwCQ,CAAxC,EAAA,EAA6C;IAC3C,IAAI;MACFR,WAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA;IADF,CAAA,CAEE,OAAA,CAAA,EAAU;MACVS,OAAAA,CAAAA,KAAAA,CAAAA,CAAAA;IACD;EACF;AACF,C,CAED;;;AACAC,MAAAA,CAAAA,kBAAAA,GAAAA,MAAAA","sourcesContent":["// @flow\n\n/**\n * A Log object\n */\nexport type Log = {\n  type: string,\n  message?: string,\n  data?: any,\n  id: string, // unique amount all logs\n  date: Date // date of the log\n};\n\nexport type Unsubscribe = () => void;\n\nlet id = 0;\nconst subscribers = [];\n\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type: string, message?: string, data?: any) => {\n  const obj: Log = { type, id: String(++id), date: new Date() };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb: Log => void): Unsubscribe => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log: Log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n// for debug purpose\nglobal.__ledgerLogsListen = listen;\n"]},"metadata":{},"sourceType":"script"}