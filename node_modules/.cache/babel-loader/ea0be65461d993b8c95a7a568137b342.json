{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport ObservableStore from '../utils/ObservableStore';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport { nanoid } from 'nanoid';\nimport _ from \"lodash\";\nimport BigNumber from \"bignumber.js\";\n\nconst {\n  EventEmitter\n} = require('events');\n\nexport default class TransactionsController extends EventEmitter {\n  constructor(opts) {\n    super();\n    const initState = { ...opts.initState\n    };\n    this.store = new ObservableStore(initState);\n    this.memStore = new ObservableStore({\n      transactionRequests: [],\n      transactions: {}\n    });\n    this.preferencesController = opts.preferencesController;\n    this.signAndSendTransaction = opts.signAndSendTransaction;\n    this._getProvider = opts.getProvider;\n    this._updateAccounts = opts.updateAccounts;\n    this.pendingTransactionRequests = new Map();\n  }\n\n  _getTransactionRequests() {\n    return this.memStore.getState().transactionRequests || [];\n  }\n\n  _setTransactionRequests(transactionRequests) {\n    this.memStore.updateState({\n      transactionRequests: transactionRequests\n    });\n  }\n\n  _addTransactionRequest(request, resolve, reject) {\n    const transactionRequests = this._getTransactionRequests();\n\n    transactionRequests.push(request);\n\n    this._setTransactionRequests(transactionRequests);\n\n    this.pendingTransactionRequests.set(request.id, {\n      request: request,\n      resolve,\n      reject\n    });\n    return true;\n  }\n\n  _removeTransactionRequest(transactionRequestId) {\n    let transactionRequests = this._getTransactionRequests();\n\n    transactionRequests = transactionRequests.filter(tx => {\n      return tx.id !== transactionRequestId;\n    });\n\n    this._setTransactionRequests(transactionRequests);\n\n    delete this.pendingTransactionRequests[transactionRequestId];\n    return true;\n  }\n\n  _getTransactionRequest(transactionRequestId) {\n    let transactionRequests = this._getTransactionRequests();\n\n    return transactionRequests.find(tx => {\n      return tx.id === transactionRequestId;\n    });\n  }\n  /**\n   * Validates and generates a txMeta with defaults and puts it in txStateManager\n   * store.\n   *\n   * @returns {Object}\n   */\n\n\n  async addTransactionRequest(transactionRequest) {\n    const fromAddress = this.preferencesController.getSelectedAddress();\n    const transaction = dnerojs.transactions.transactionFromJson(transactionRequest);\n    transaction.setFrom(fromAddress);\n    const gasFeeData = await this.getEstimatedGasData(transaction);\n    let transactionDepJson = (transactionRequest.dependencies || [])[0];\n\n    if (transactionDepJson) {\n      const transactionDep = dnerojs.transactions.transactionFromJson(transactionDepJson);\n      transactionDep.setFrom(fromAddress);\n      const depGasFeeData = await this.getEstimatedGasData(transactionDep);\n      transactionDepJson = { ...transactionDepJson,\n        txData: { ...transactionDepJson.txData,\n          ..._.pick(depGasFeeData, ['gasPrice', 'gasLimit'])\n        },\n        gasFeeData: depGasFeeData\n      };\n      transactionRequest.dependencies = [transactionDepJson];\n    }\n\n    return new Promise((resolve, reject) => {\n      this._addTransactionRequest(Object.assign({}, transactionRequest, {\n        id: nanoid(),\n        txData: { ...transactionRequest.txData,\n          ..._.pick(gasFeeData, ['gasPrice', 'gasLimit'])\n        },\n        gasFeeData: gasFeeData\n      }), resolve, reject);\n    });\n  }\n  /**\n   * Validates and generates a txMeta with defaults and puts it in txStateManager\n   * store.\n   *\n   * @returns {Object}\n   */\n\n\n  async approveTransactionRequest(transactionRequestId, onDependencySent) {\n    const provider = this._getProvider();\n\n    const approval = this.pendingTransactionRequests.get(transactionRequestId);\n    const transactionRequest = approval.request;\n    const fromAddress = this.preferencesController.getSelectedAddress();\n    const transactionDepJson = (transactionRequest.dependencies || [])[0];\n\n    if (transactionDepJson) {\n      const transactionDep = dnerojs.transactions.transactionFromJson(transactionDepJson);\n      await this.signAndSendTransaction(fromAddress, transactionDep, provider);\n\n      if (onDependencySent) {\n        onDependencySent();\n      }\n    }\n\n    const transaction = dnerojs.transactions.transactionFromJson(transactionRequest);\n    const result = await this.signAndSendTransaction(fromAddress, transaction, provider);\n\n    if (result) {\n      const approval = this.pendingTransactionRequests.get(transactionRequestId);\n\n      this._removeTransactionRequest(transactionRequestId); // Refresh balances because we just sent a tx\n\n\n      this._updateAccounts();\n\n      approval.resolve(result);\n      return result;\n    }\n\n    return true;\n  }\n  /**\n   * Validates and generates a txMeta with defaults and puts it in txStateManager\n   * store.\n   *\n   * @returns {Object}\n   */\n\n\n  async rejectTransactionRequest(transactionRequestId) {\n    this._removeTransactionRequest(transactionRequestId);\n\n    const approval = this.pendingTransactionRequests.get(transactionRequestId); // approval.reject(new Error('User rejected transaction.'));\n\n    return true;\n  }\n\n  _transformTransaction(rawXact, priorityAddress) {\n    if (rawXact.type === dnerojs.constants.TxType.Send) {\n      let xact = {};\n      xact.type = rawXact.type;\n      xact.number = rawXact.number;\n      xact.status = rawXact.status;\n      xact.hash = rawXact.hash.toLowerCase();\n      xact.timestamp = rawXact.timestamp;\n      xact.fee = {\n        dnero: rawXact.data.fee.dnerowei,\n        dtoken: rawXact.data.fee.dtokenwei\n      };\n      xact.inputs = _.map(rawXact.data.inputs, input => {\n        return _.pick(input, ['address', 'coins']);\n      });\n      xact.outputs = _.map(rawXact.data.outputs, output => {\n        return _.pick(output, ['address', 'coins']);\n      }); //Sort outputs\n\n      if (priorityAddress) {\n        var priorityAddressLC = priorityAddress.toLowerCase();\n        xact.outputs = _.sortBy(xact.outputs, function (output) {\n          //Ensure the priorityAddress is always first (lowest sort key) in the list\n          return priorityAddressLC === output.address.toLowerCase() ? -100 : 0;\n        });\n      }\n\n      return xact;\n    }\n\n    return null;\n  }\n\n  async updateAccountTransactions(address) {\n    let txs = null;\n\n    if (_.isEmpty(address)) {\n      return [];\n    }\n\n    try {\n      const network = this.preferencesController.getNetwork();\n      const chainId = network.chainId;\n      const explorerUrl = dnerojs.networks.getExplorerUrlForChainId(chainId);\n      const explorerApiUrl = `${explorerUrl}:8443/api`;\n      const listStakesUrl = `${explorerApiUrl}/accounttx/${address}`;\n      const response = await fetch(listStakesUrl);\n      const responseJson = await response.json();\n      txs = _.get(responseJson, ['body'], []);\n      txs = _.map(txs, tx => {\n        return this._transformTransaction(tx, address);\n      });\n      txs = _.filter(txs, tx => {\n        return !_.isNil(tx);\n      });\n    } catch (e) {\n      // No Update\n      return [];\n    } // update accounts state\n\n\n    const {\n      transactions\n    } = this.memStore.getState();\n    transactions[address] = txs;\n    this.memStore.updateState({\n      transactions: transactions\n    });\n    return txs;\n  }\n  /**\n   * Estimates the gas fee\n   *\n   * @returns {Object}\n   */\n\n\n  async getEstimatedGasData(transaction) {\n    if (transaction.getType() === dnerojs.constants.TxType.SmartContract) {\n      if (transaction.gasLimit !== dnerojs.constants.gasLimitDefault) {\n        // Gas fee was set by user...\n        return {\n          gasPrice: transaction.gasPrice.toString(),\n          gasLimit: transaction.gasLimit,\n          totalGasFee: transaction.gasPrice.multipliedBy(transaction.gasLimit).toString()\n        };\n      }\n\n      const provider = this._getProvider();\n\n      const result = await provider.callSmartContract(transaction); // if(!_.isEmpty(result.vm_error)){\n      //     throw new Error(result.vm_error);\n      // }\n\n      const gasLimitWithBuffer = new BigNumber(result.gas_used).multipliedBy(1.5);\n      const gasLimit = Math.ceil(gasLimitWithBuffer.toNumber());\n      return {\n        gasPrice: dnerojs.constants.gasPriceSmartContractDefault.toString(),\n        gasLimit: gasLimit,\n        totalGasFee: dnerojs.constants.gasPriceSmartContractDefault.multipliedBy(gasLimit).toString()\n      };\n    } else {\n      return {\n        gasPrice: dnerojs.constants.gasPriceDefault.toString(),\n        totalGasFee: dnerojs.constants.gasPriceDefault.toString()\n      };\n    }\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TransactionsController, \"TransactionsController\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/controllers/transactions.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["ObservableStore","dnerojs","nanoid","_","BigNumber","EventEmitter","require","TransactionsController","constructor","opts","initState","store","memStore","transactionRequests","transactions","preferencesController","signAndSendTransaction","_getProvider","getProvider","_updateAccounts","updateAccounts","pendingTransactionRequests","Map","_getTransactionRequests","getState","_setTransactionRequests","updateState","_addTransactionRequest","request","resolve","reject","push","set","id","_removeTransactionRequest","transactionRequestId","filter","tx","_getTransactionRequest","find","addTransactionRequest","transactionRequest","fromAddress","getSelectedAddress","transaction","transactionFromJson","setFrom","gasFeeData","getEstimatedGasData","transactionDepJson","dependencies","transactionDep","depGasFeeData","txData","pick","Promise","Object","assign","approveTransactionRequest","onDependencySent","provider","approval","get","result","rejectTransactionRequest","_transformTransaction","rawXact","priorityAddress","type","constants","TxType","Send","xact","number","status","hash","toLowerCase","timestamp","fee","dnero","data","dnerowei","dtoken","dtokenwei","inputs","map","input","outputs","output","priorityAddressLC","sortBy","address","updateAccountTransactions","txs","isEmpty","network","getNetwork","chainId","explorerUrl","networks","getExplorerUrlForChainId","explorerApiUrl","listStakesUrl","response","fetch","responseJson","json","isNil","e","getType","SmartContract","gasLimit","gasLimitDefault","gasPrice","toString","totalGasFee","multipliedBy","callSmartContract","gasLimitWithBuffer","gas_used","Math","ceil","toNumber","gasPriceSmartContractDefault","gasPriceDefault"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/controllers/transactions.js"],"sourcesContent":["import ObservableStore from '../utils/ObservableStore';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport {nanoid} from 'nanoid';\nimport _ from \"lodash\";\nimport BigNumber from \"bignumber.js\";\n\nconst { EventEmitter } = require('events');\n\nexport default class TransactionsController extends EventEmitter{\n    constructor(opts) {\n        super();\n\n        const initState = {\n            ...opts.initState,\n        };\n        this.store = new ObservableStore(initState);\n\n        this.memStore = new ObservableStore({\n            transactionRequests: [],\n            transactions: {}\n        });\n\n        this.preferencesController = opts.preferencesController;\n\n        this.signAndSendTransaction = opts.signAndSendTransaction;\n\n        this._getProvider = opts.getProvider;\n\n        this._updateAccounts = opts.updateAccounts;\n\n        this.pendingTransactionRequests = new Map();\n    }\n\n    _getTransactionRequests(){\n        return this.memStore.getState().transactionRequests || [];\n    }\n\n    _setTransactionRequests(transactionRequests){\n        this.memStore.updateState({\n            transactionRequests: transactionRequests\n        });\n    }\n\n    _addTransactionRequest(request, resolve, reject){\n        const transactionRequests = this._getTransactionRequests();\n        transactionRequests.push(request);\n        this._setTransactionRequests(transactionRequests);\n        this.pendingTransactionRequests.set(request.id, {\n            request: request,\n            resolve,\n            reject\n        });\n\n        return true;\n    }\n\n    _removeTransactionRequest(transactionRequestId){\n        let transactionRequests = this._getTransactionRequests();\n        transactionRequests = transactionRequests.filter((tx)=> {\n            return (tx.id !== transactionRequestId);\n        });\n\n        this._setTransactionRequests(transactionRequests);\n        delete this.pendingTransactionRequests[transactionRequestId];\n\n        return true;\n    }\n\n    _getTransactionRequest(transactionRequestId){\n        let transactionRequests = this._getTransactionRequests();\n        return  transactionRequests.find((tx)=> {\n            return (tx.id === transactionRequestId);\n        });\n    }\n\n    /**\n     * Validates and generates a txMeta with defaults and puts it in txStateManager\n     * store.\n     *\n     * @returns {Object}\n     */\n    async addTransactionRequest(transactionRequest) {\n        const fromAddress = this.preferencesController.getSelectedAddress();\n        const transaction = dnerojs.transactions.transactionFromJson(transactionRequest);\n        transaction.setFrom(fromAddress);\n        const gasFeeData = await this.getEstimatedGasData(transaction);\n        let transactionDepJson = (transactionRequest.dependencies || [])[0];\n\n        if(transactionDepJson){\n            const transactionDep = dnerojs.transactions.transactionFromJson(transactionDepJson);\n            transactionDep.setFrom(fromAddress);\n            const depGasFeeData = await this.getEstimatedGasData(transactionDep);\n            transactionDepJson = {\n                ...transactionDepJson,\n                txData: {\n                    ...transactionDepJson.txData,\n                    ..._.pick(depGasFeeData, ['gasPrice', 'gasLimit'])\n                },\n                gasFeeData: depGasFeeData\n            };\n            transactionRequest.dependencies = [transactionDepJson]\n        }\n\n        return new Promise((resolve, reject) => {\n            this._addTransactionRequest(Object.assign({}, transactionRequest, {\n                id: nanoid(),\n                txData: {\n                    ...transactionRequest.txData,\n                    ..._.pick(gasFeeData, ['gasPrice', 'gasLimit'])\n                },\n                gasFeeData: gasFeeData\n            }), resolve, reject);\n        });\n    }\n\n    /**\n     * Validates and generates a txMeta with defaults and puts it in txStateManager\n     * store.\n     *\n     * @returns {Object}\n     */\n    async approveTransactionRequest(transactionRequestId, onDependencySent) {\n        const provider = this._getProvider();\n        const approval = this.pendingTransactionRequests.get(transactionRequestId);\n        const transactionRequest = approval.request;\n        const fromAddress = this.preferencesController.getSelectedAddress();\n        const transactionDepJson = (transactionRequest.dependencies || [])[0];\n        if(transactionDepJson){\n            const transactionDep = dnerojs.transactions.transactionFromJson(transactionDepJson);\n            await this.signAndSendTransaction(fromAddress, transactionDep, provider);\n\n            if(onDependencySent){\n                onDependencySent();\n            }\n        }\n        const transaction = dnerojs.transactions.transactionFromJson(transactionRequest);\n        const result = await this.signAndSendTransaction(fromAddress, transaction, provider);\n\n        if(result){\n            const approval = this.pendingTransactionRequests.get(transactionRequestId);\n            this._removeTransactionRequest(transactionRequestId);\n\n            // Refresh balances because we just sent a tx\n            this._updateAccounts();\n\n            approval.resolve(result);\n\n            return result;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates and generates a txMeta with defaults and puts it in txStateManager\n     * store.\n     *\n     * @returns {Object}\n     */\n    async rejectTransactionRequest(transactionRequestId) {\n        this._removeTransactionRequest(transactionRequestId);\n        const approval = this.pendingTransactionRequests.get(transactionRequestId);\n        // approval.reject(new Error('User rejected transaction.'));\n\n        return true;\n    }\n\n    _transformTransaction(rawXact, priorityAddress) {\n        if (rawXact.type === dnerojs.constants.TxType.Send) {\n            let xact = {};\n\n            xact.type = rawXact.type;\n            xact.number = rawXact.number;\n            xact.status = rawXact.status;\n            xact.hash = rawXact.hash.toLowerCase();\n            xact.timestamp = rawXact.timestamp;\n            xact.fee = {\n                dnero: rawXact.data.fee.dnerowei,\n                dtoken: rawXact.data.fee.dtokenwei\n            };\n\n            xact.inputs = _.map(rawXact.data.inputs, (input) => {\n                return _.pick(input, ['address', 'coins']);\n            });\n            xact.outputs = _.map(rawXact.data.outputs, (output) => {\n                return _.pick(output, ['address', 'coins']);\n            });\n\n            //Sort outputs\n            if(priorityAddress){\n                var priorityAddressLC = priorityAddress.toLowerCase();\n\n                xact.outputs = _.sortBy(xact.outputs, function(output){\n                    //Ensure the priorityAddress is always first (lowest sort key) in the list\n                    return ((priorityAddressLC === output.address.toLowerCase()) ? -100 : 0);\n                });\n            }\n\n            return xact;\n        }\n\n        return null;\n    }\n\n    async updateAccountTransactions(address){\n        let txs = null;\n\n        if(_.isEmpty(address)){\n            return [];\n        }\n\n        try {\n            const network = this.preferencesController.getNetwork();\n            const chainId = network.chainId;\n            const explorerUrl = dnerojs.networks.getExplorerUrlForChainId(chainId);\n            const explorerApiUrl = `${explorerUrl}:8443/api`;\n            const listStakesUrl = `${explorerApiUrl}/accounttx/${address}`;\n            const response = await fetch(listStakesUrl);\n            const responseJson = await response.json();\n            txs = _.get(responseJson, ['body'], []);\n            txs = _.map(txs, (tx) => {\n                return this._transformTransaction(tx, address);\n            });\n            txs = _.filter(txs, (tx) => {\n                return !_.isNil(tx);\n            });\n        }\n        catch (e) {\n            // No Update\n            return [];\n        }\n\n        // update accounts state\n        const { transactions } = this.memStore.getState();\n        transactions[address] = txs;\n\n        this.memStore.updateState({\n            transactions: transactions\n        });\n\n        return txs;\n    }\n\n    /**\n     * Estimates the gas fee\n     *\n     * @returns {Object}\n     */\n    async getEstimatedGasData(transaction) {\n        if(transaction.getType() === dnerojs.constants.TxType.SmartContract){\n            if(transaction.gasLimit !== dnerojs.constants.gasLimitDefault){\n                // Gas fee was set by user...\n                return {\n                    gasPrice: transaction.gasPrice.toString(),\n                    gasLimit: transaction.gasLimit,\n                    totalGasFee: transaction.gasPrice.multipliedBy(transaction.gasLimit).toString()\n                }\n            }\n\n            const provider = this._getProvider();\n            const result = await provider.callSmartContract(transaction);\n\n            // if(!_.isEmpty(result.vm_error)){\n            //     throw new Error(result.vm_error);\n            // }\n\n            const gasLimitWithBuffer = (new BigNumber(result.gas_used)).multipliedBy(1.5);\n            const gasLimit = Math.ceil(gasLimitWithBuffer.toNumber());\n\n            return {\n                gasPrice: dnerojs.constants.gasPriceSmartContractDefault.toString(),\n                gasLimit: gasLimit,\n                totalGasFee: dnerojs.constants.gasPriceSmartContractDefault.multipliedBy(gasLimit).toString()\n            }\n        }\n        else{\n            return {\n                gasPrice: dnerojs.constants.gasPriceDefault.toString(),\n                totalGasFee: dnerojs.constants.gasPriceDefault.toString()\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}