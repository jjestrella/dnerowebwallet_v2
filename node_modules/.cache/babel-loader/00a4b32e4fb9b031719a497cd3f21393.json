{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport _ from 'lodash';\nimport { zipMap } from \"../utils/Utils\";\nconst Networks = {\n  __deprecated__ETHEREUM: 'ethereum',\n  DNERO_TESTNET: 'testnet',\n  DNERO_TESTNET_AMBER: 'testnet_amber',\n  DNERO_TESTNET_SAPPHIRE: 'testnet_sapphire',\n  DNERO_MAINNET: 'mainnet',\n  DNERO_PRIVATENET: 'privatenet'\n};\nexport const NetworksWithDescriptions = [{\n  id: Networks.DNERO_MAINNET,\n  name: \"Mainnet\",\n  description: \"DNERO mainnet (Default)\" // faucetId: \"mainnet\"\n\n}, {\n  id: Networks.DNERO_TESTNET,\n  name: \"Testnet\",\n  description: \"DNERO testnet\",\n  faucetId: \"testnet\"\n}, {\n  id: Networks.DNERO_TESTNET_AMBER,\n  name: \"Testnet_Amber\",\n  description: \"DNERO testnet for elite edge nodes (Apr 2021)\"\n}, {\n  id: Networks.DNERO_TESTNET_SAPPHIRE,\n  name: \"Testnet (Sapphire)\",\n  description: \"DNERO testnet for sentry nodes (Feb 2020)\" // faucetId: \"sapphire\"\n\n}, {\n  id: Networks.DNERO_PRIVATENET,\n  name: \"Smart Contracts Sandbox\",\n  description: \"DNERO testnet for Smart Contracts (ALPHA)\",\n  faucetId: \"smart_contract\"\n}];\nexport const NetworksById = zipMap(NetworksWithDescriptions.map(_ref => {\n  let {\n    id\n  } = _ref;\n  return id;\n}), NetworksWithDescriptions);\nexport const NetworkExplorerUrls = {\n  //    [Networks.DNERO_MAINNET]: 'https://explorer.dnerochain.org',\n  [Networks.DNERO_MAINNET]: 'http://164.92.81.239:5445' //\n  //    [Networks.DNERO_TESTNET]: 'https://beta-explorer.dnerochain.org',\n  //    [Networks.DNERO_TESTNET_AMBER]: 'https://elite-edge-testnet-explorer.dnerochain.org',\n  //    [Networks.DNERO_TESTNET_SAPPHIRE]: 'https://sentry-testnet-explorer.dnerochain.org',\n  //    [Networks.DNERO_PRIVATENET]: 'https://smart-contracts-sandbox-explorer.dnerochain.org'\n\n};\nexport function isEthereumNetwork(network) {\n  return network === Networks.__deprecated__ETHEREUM;\n}\nexport function isDneroNetwork(network) {\n  return network !== Networks.__deprecated__ETHEREUM;\n}\nexport function canEdgeNodeStake(network) {\n  return true;\n  return network === Networks.DNERO_TESTNET_AMBER;\n}\nexport function canSentryNodeStake(network) {\n  return true;\n}\nexport function canViewSmartContracts(network) {\n  return true;\n}\nexport function getNetworkName(networkId) {\n  return _.get(NetworksById, [networkId, 'name']);\n}\nexport function getNetworkFaucetId(networkId) {\n  return _.get(NetworksById, [networkId, 'faucetId']);\n}\nconst _default = Networks;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Networks, \"Networks\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(NetworksWithDescriptions, \"NetworksWithDescriptions\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(NetworksById, \"NetworksById\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(NetworkExplorerUrls, \"NetworkExplorerUrls\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(isEthereumNetwork, \"isEthereumNetwork\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(isDneroNetwork, \"isDneroNetwork\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(canEdgeNodeStake, \"canEdgeNodeStake\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(canSentryNodeStake, \"canSentryNodeStake\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(canViewSmartContracts, \"canViewSmartContracts\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(getNetworkName, \"getNetworkName\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(getNetworkFaucetId, \"getNetworkFaucetId\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["_","zipMap","Networks","__deprecated__ETHEREUM","DNERO_TESTNET","DNERO_TESTNET_AMBER","DNERO_TESTNET_SAPPHIRE","DNERO_MAINNET","DNERO_PRIVATENET","NetworksWithDescriptions","id","name","description","faucetId","NetworksById","map","NetworkExplorerUrls","isEthereumNetwork","network","isDneroNetwork","canEdgeNodeStake","canSentryNodeStake","canViewSmartContracts","getNetworkName","networkId","get","getNetworkFaucetId"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/constants/Networks.js"],"sourcesContent":["import _ from 'lodash';\nimport {zipMap} from \"../utils/Utils\";\n\nconst Networks =  {\n    __deprecated__ETHEREUM: 'ethereum',\n    DNERO_TESTNET: 'testnet',\n    DNERO_TESTNET_AMBER: 'testnet_amber',\n    DNERO_TESTNET_SAPPHIRE: 'testnet_sapphire',\n    DNERO_MAINNET: 'mainnet',\n    DNERO_PRIVATENET: 'privatenet',\n};\n\nexport const NetworksWithDescriptions = [\n    {\n        id: Networks.DNERO_MAINNET,\n        name: \"Mainnet\",\n        description: \"DNERO mainnet (Default)\",\n        // faucetId: \"mainnet\"\n    },\n    {\n        id: Networks.DNERO_TESTNET,\n        name: \"Testnet\",\n        description: \"DNERO testnet\",\n        faucetId: \"testnet\"\n    },\n    {\n        id: Networks.DNERO_TESTNET_AMBER,\n        name: \"Testnet_Amber\",\n        description: \"DNERO testnet for elite edge nodes (Apr 2021)\"\n    },\n    {\n        id: Networks.DNERO_TESTNET_SAPPHIRE,\n        name: \"Testnet (Sapphire)\",\n        description: \"DNERO testnet for sentry nodes (Feb 2020)\",\n        // faucetId: \"sapphire\"\n    },\n    {\n        id: Networks.DNERO_PRIVATENET,\n        name: \"Smart Contracts Sandbox\",\n        description: \"DNERO testnet for Smart Contracts (ALPHA)\",\n        faucetId: \"smart_contract\"\n    }\n];\n\nexport const NetworksById = zipMap(NetworksWithDescriptions.map(({ id }) => id), NetworksWithDescriptions);\n\nexport const NetworkExplorerUrls = {\n//    [Networks.DNERO_MAINNET]: 'https://explorer.dnerochain.org',\n\t  [Networks.DNERO_MAINNET]: 'http://164.92.81.239:5445',\n//\n//    [Networks.DNERO_TESTNET]: 'https://beta-explorer.dnerochain.org',\n//    [Networks.DNERO_TESTNET_AMBER]: 'https://elite-edge-testnet-explorer.dnerochain.org',\n//    [Networks.DNERO_TESTNET_SAPPHIRE]: 'https://sentry-testnet-explorer.dnerochain.org',\n//    [Networks.DNERO_PRIVATENET]: 'https://smart-contracts-sandbox-explorer.dnerochain.org'\n};\n\nexport function isEthereumNetwork(network) {\n    return (network === Networks.__deprecated__ETHEREUM);\n}\n\nexport function isDneroNetwork(network) {\n    return (network !== Networks.__deprecated__ETHEREUM);\n}\n\nexport function canEdgeNodeStake(network) {\n    return true;\n    return (network === Networks.DNERO_TESTNET_AMBER);\n}\n\nexport function canSentryNodeStake(network) {\n    return true;\n}\n\nexport function canViewSmartContracts(network) {\n    return true;\n}\n\nexport function getNetworkName(networkId){\n    return _.get(NetworksById, [networkId, 'name']);\n}\n\nexport function getNetworkFaucetId(networkId){\n    return _.get(NetworksById, [networkId, 'faucetId']);\n}\n\nexport default Networks;\n"],"mappings":";;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAAQC,MAAR,QAAqB,gBAArB;AAEA,MAAMC,QAAQ,GAAI;EACdC,sBAAsB,EAAE,UADV;EAEdC,aAAa,EAAE,SAFD;EAGdC,mBAAmB,EAAE,eAHP;EAIdC,sBAAsB,EAAE,kBAJV;EAKdC,aAAa,EAAE,SALD;EAMdC,gBAAgB,EAAE;AANJ,CAAlB;AASA,OAAO,MAAMC,wBAAwB,GAAG,CACpC;EACIC,EAAE,EAAER,QAAQ,CAACK,aADjB;EAEII,IAAI,EAAE,SAFV;EAGIC,WAAW,EAAE,yBAHjB,CAII;;AAJJ,CADoC,EAOpC;EACIF,EAAE,EAAER,QAAQ,CAACE,aADjB;EAEIO,IAAI,EAAE,SAFV;EAGIC,WAAW,EAAE,eAHjB;EAIIC,QAAQ,EAAE;AAJd,CAPoC,EAapC;EACIH,EAAE,EAAER,QAAQ,CAACG,mBADjB;EAEIM,IAAI,EAAE,eAFV;EAGIC,WAAW,EAAE;AAHjB,CAboC,EAkBpC;EACIF,EAAE,EAAER,QAAQ,CAACI,sBADjB;EAEIK,IAAI,EAAE,oBAFV;EAGIC,WAAW,EAAE,2CAHjB,CAII;;AAJJ,CAlBoC,EAwBpC;EACIF,EAAE,EAAER,QAAQ,CAACM,gBADjB;EAEIG,IAAI,EAAE,yBAFV;EAGIC,WAAW,EAAE,2CAHjB;EAIIC,QAAQ,EAAE;AAJd,CAxBoC,CAAjC;AAgCP,OAAO,MAAMC,YAAY,GAAGb,MAAM,CAACQ,wBAAwB,CAACM,GAAzB,CAA6B;EAAA,IAAC;IAAEL;EAAF,CAAD;EAAA,OAAYA,EAAZ;AAAA,CAA7B,CAAD,EAA+CD,wBAA/C,CAA3B;AAEP,OAAO,MAAMO,mBAAmB,GAAG;EACnC;EACG,CAACd,QAAQ,CAACK,aAAV,GAA0B,2BAFM,CAGnC;EACA;EACA;EACA;EACA;;AAPmC,CAA5B;AAUP,OAAO,SAASU,iBAAT,CAA2BC,OAA3B,EAAoC;EACvC,OAAQA,OAAO,KAAKhB,QAAQ,CAACC,sBAA7B;AACH;AAED,OAAO,SAASgB,cAAT,CAAwBD,OAAxB,EAAiC;EACpC,OAAQA,OAAO,KAAKhB,QAAQ,CAACC,sBAA7B;AACH;AAED,OAAO,SAASiB,gBAAT,CAA0BF,OAA1B,EAAmC;EACtC,OAAO,IAAP;EACA,OAAQA,OAAO,KAAKhB,QAAQ,CAACG,mBAA7B;AACH;AAED,OAAO,SAASgB,kBAAT,CAA4BH,OAA5B,EAAqC;EACxC,OAAO,IAAP;AACH;AAED,OAAO,SAASI,qBAAT,CAA+BJ,OAA/B,EAAwC;EAC3C,OAAO,IAAP;AACH;AAED,OAAO,SAASK,cAAT,CAAwBC,SAAxB,EAAkC;EACrC,OAAOxB,CAAC,CAACyB,GAAF,CAAMX,YAAN,EAAoB,CAACU,SAAD,EAAY,MAAZ,CAApB,CAAP;AACH;AAED,OAAO,SAASE,kBAAT,CAA4BF,SAA5B,EAAsC;EACzC,OAAOxB,CAAC,CAACyB,GAAF,CAAMX,YAAN,EAAoB,CAACU,SAAD,EAAY,UAAZ,CAApB,CAAP;AACH;iBAEctB,Q;AAAf;;;;;;;;;;0BAlFMA,Q;0BASOO,wB;0BAgCAK,Y;0BAEAE,mB;0BAUGC,iB;0BAIAE,c;0BAIAC,gB;0BAKAC,kB;0BAIAC,qB;0BAIAC,c;0BAIAG,kB"},"metadata":{},"sourceType":"module"}