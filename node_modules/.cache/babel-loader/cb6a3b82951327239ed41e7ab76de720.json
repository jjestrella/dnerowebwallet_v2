{"ast":null,"code":"var _jsxFileName = \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/WithdrawStakeTxForm.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../FormField';\nimport { StakePurposeForDDROP } from '../../constants';\nimport { formatDNC20TokenAmountToLargestUnit } from '../../utils/Utils';\nimport _ from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { DDropAsset } from '../../constants/assets';\nexport default function WithdrawStakeTxForm(props) {\n  const {\n    onSubmit,\n    defaultValues,\n    formRef,\n    selectedAccount,\n    assets,\n    chainId\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    setValue\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: defaultValues || {\n      purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n      holder: '',\n      amount: ''\n    }\n  });\n  const purpose = parseInt(watch('purpose'));\n  const amount = watch('amount');\n\n  const renderEstDDROPToReturn = () => {\n    const percentageToUnstake = Math.min(parseFloat(amount), 100.0) / 100;\n\n    const dnc20stakes = _.get(selectedAccount, ['dnc20Stakes'], {});\n\n    const balanceStr = _.get(dnc20stakes, 'ddrop.estimatedTokenOwnedWithRewards', '0');\n\n    const balanceBN = new BigNumber(balanceStr);\n    const amountBN = balanceBN.multipliedBy(percentageToUnstake);\n    const formattedAmt = formatDNC20TokenAmountToLargestUnit(amountBN.toString(), DDropAsset(chainId).decimals);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: 'Balance__amount-title',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, \"Estimated DDROP Returned: \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: 'Balance__amount-value',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 92\n      }\n    }, formattedAmt));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: 'TxForm TxForm--WithdrawStake',\n    onSubmit: handleSubmit(onSubmit),\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    title: 'Stake Type',\n    error: errors.purpose && 'Stake type is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: 'RoundedInput',\n    name: 'purpose',\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: '__placeholder__',\n    value: '',\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"Select stake type\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'sentry',\n    value: dnerojs.constants.StakePurpose.StakeForSentry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, \"Sentry Node\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'validator',\n    value: dnerojs.constants.StakePurpose.StakeForValidator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \"Validator Node\"), /*#__PURE__*/React.createElement(\"option\", {\n    key: 'validator',\n    value: dnerojs.constants.StakePurpose.StakeForEliteEdge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"Edge Node\"), DDropAsset(chainId) && /*#__PURE__*/React.createElement(\"option\", {\n    key: 'ddrop',\n    value: StakePurposeForDDROP,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, \"DDROP\"))), purpose !== StakePurposeForDDROP && /*#__PURE__*/React.createElement(FormField, {\n    title: 'Holder',\n    error: errors.holder && 'A valid node address is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"holder\",\n    className: 'RoundedInput',\n    placeholder: 'Enter node address',\n    ref: register({\n      required: true,\n      validate: s => ethers.utils.isAddress(s)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  })), purpose === StakePurposeForDDROP && /*#__PURE__*/React.createElement(FormField, {\n    title: '% Amount to Unstake',\n    error: errors.amount && errors.amount.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"amount\",\n    className: 'RoundedInput',\n    placeholder: 'Enter % amount to unstake',\n    ref: register({\n      required: {\n        value: true,\n        message: 'Unstake % amount is required'\n      },\n      validate: {\n        moreThanZero: s => {\n          const f = parseFloat(s);\n          return f > 0 ? true : 'Invalid % amount.';\n        },\n        lessThanOrEqualTo100: s => {\n          const f = parseFloat(s);\n          return f <= 100.0 ? true : 'Invalid % amount. Max 100%.';\n        }\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  })), purpose === StakePurposeForDDROP && !_.isEmpty(amount) && renderEstDDROPToReturn());\n}\n\n__signature__(WithdrawStakeTxForm, \"useForm{{register, handleSubmit, errors, watch, setValue}}\", () => [useForm]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(WithdrawStakeTxForm, \"WithdrawStakeTxForm\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/WithdrawStakeTxForm.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["React","useForm","ethers","dnerojs","FormField","StakePurposeForDDROP","formatDNC20TokenAmountToLargestUnit","_","BigNumber","DDropAsset","WithdrawStakeTxForm","props","onSubmit","defaultValues","formRef","selectedAccount","assets","chainId","register","handleSubmit","errors","watch","setValue","mode","purpose","constants","StakePurpose","StakeForSentry","holder","amount","parseInt","renderEstDDROPToReturn","percentageToUnstake","Math","min","parseFloat","dnc20stakes","get","balanceStr","balanceBN","amountBN","multipliedBy","formattedAmt","toString","decimals","required","StakeForValidator","StakeForEliteEdge","validate","s","utils","isAddress","message","value","moreThanZero","f","lessThanOrEqualTo100","isEmpty"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/WithdrawStakeTxForm.js"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../FormField';\nimport {StakePurposeForDDROP} from '../../constants';\nimport {formatDNC20TokenAmountToLargestUnit} from '../../utils/Utils';\nimport _ from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport {DDropAsset} from '../../constants/assets';\n\nexport default function WithdrawStakeTxForm(props){\n    const {onSubmit, defaultValues, formRef, selectedAccount, assets, chainId} = props;\n    const {register, handleSubmit, errors, watch, setValue} = useForm({\n        mode: 'onChange',\n        defaultValues: defaultValues || {\n            purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n            holder: '',\n            amount: ''\n        }\n    });\n    const purpose = parseInt(watch('purpose'));\n    const amount = watch('amount');\n\n\n    const renderEstDDROPToReturn = () => {\n        const percentageToUnstake = Math.min(parseFloat(amount), 100.0) / 100;\n        const dnc20stakes = _.get(selectedAccount, ['dnc20Stakes'], {});\n        const balanceStr = _.get(dnc20stakes, 'ddrop.estimatedTokenOwnedWithRewards', '0');\n        const balanceBN = new BigNumber(balanceStr);\n        const amountBN = balanceBN.multipliedBy(percentageToUnstake);\n        const formattedAmt = formatDNC20TokenAmountToLargestUnit(amountBN.toString(), DDropAsset(chainId).decimals);\n\n        return (\n            <div>\n                <span className={'Balance__amount-title'}>Estimated DDROP Returned: </span><span className={'Balance__amount-value'}>{formattedAmt}</span>\n            </div>\n        );\n    };\n\n    return (\n        <form className={'TxForm TxForm--WithdrawStake'}\n              onSubmit={handleSubmit(onSubmit)}\n              ref={formRef}\n        >\n            <FormField title={'Stake Type'}\n                       error={errors.purpose && 'Stake type is required'}\n            >\n                <select\n                    className={'RoundedInput'}\n                    name={'purpose'}\n                    ref={register({ required: true })}\n                >\n                    <option key={'__placeholder__'}\n                            value={''}\n                            disabled>\n                        Select stake type\n                    </option>\n                    <option key={'sentry'}\n                            value={dnerojs.constants.StakePurpose.StakeForSentry}>\n                        Sentry Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForValidator}>\n                        Validator Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForEliteEdge}>\n                        Edge Node\n                    </option>\n                    {\n                        DDropAsset(chainId) &&\n                        <option key={'ddrop'}\n                                value={StakePurposeForDDROP}>\n                            DDROP\n                        </option>\n                    }\n\n                </select>\n            </FormField>\n\n            {\n                purpose !== StakePurposeForDDROP &&\n                <FormField title={'Holder'}\n                           error={errors.holder && 'A valid node address is required'}\n                >\n                    <input name=\"holder\"\n                           className={'RoundedInput'}\n                           placeholder={'Enter node address'}\n                           ref={register({\n                               required: true,\n                               validate: (s) => ethers.utils.isAddress(s)\n                           })} />\n                </FormField>\n            }\n\n            {\n                purpose === StakePurposeForDDROP &&\n                <FormField title={'% Amount to Unstake'}\n                           error={errors.amount && errors.amount.message}\n                >\n                    <input name=\"amount\"\n                           className={'RoundedInput'}\n                           placeholder={'Enter % amount to unstake'}\n                           ref={register({\n                               required: {\n                                   value: true,\n                                   message: 'Unstake % amount is required'\n                               },\n                               validate: {\n                                   moreThanZero: (s) => {\n                                       const f = parseFloat(s);\n\n                                       return (f > 0) ? true : 'Invalid % amount.';\n                                   },\n                                   lessThanOrEqualTo100: (s) => {\n                                       const f = parseFloat(s);\n\n                                       return (f <= 100.0) ? true : 'Invalid % amount. Max 100%.';\n                                   }\n                               }\n                           })} />\n                </FormField>\n            }\n            {\n                (purpose === StakePurposeForDDROP && !_.isEmpty(amount)) &&\n                renderEstDDROPToReturn()\n            }\n        </form>\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}