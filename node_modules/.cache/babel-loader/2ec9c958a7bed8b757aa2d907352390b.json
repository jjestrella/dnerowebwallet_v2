{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport * as dnerojs from '@dnerolabs/dnero-js';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst Type = 'SimpleKeyring';\n\nclass SimpleKeyring extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.type = Type;\n    this.wallets = [];\n    this.deserialize(opts);\n  }\n\n  serialize() {\n    return Promise.resolve(this.wallets.map(w => w.privateKey));\n  }\n\n  deserialize() {\n    let privateKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return new Promise((resolve, reject) => {\n      try {\n        this.wallets = privateKeys.map(privateKey => {\n          const wallet = new dnerojs.Wallet(privateKey);\n          return wallet;\n        });\n      } catch (e) {\n        reject(e);\n      }\n\n      resolve();\n    });\n  }\n\n  addAccounts() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const newWallets = [];\n\n    for (let i = 0; i < n; i++) {\n      const wallet = dnerojs.Wallet.createRandom(null);\n      newWallets.push(wallet);\n    }\n\n    this.wallets = this.wallets.concat(newWallets);\n    const walletAddresses = newWallets.map(w => w.getAddress());\n    return Promise.resolve(walletAddresses);\n  }\n\n  getAccounts() {\n    return Promise.resolve(this.wallets.map(w => w.getAddress()));\n  }\n\n  signTransaction(fromAddress, transaction, provider) {\n    let wallet = this._getWalletForAccount(fromAddress);\n\n    wallet = wallet.connect(provider);\n    const signedTxBytes = wallet.signTransaction(transaction); // tx.sign(privKey);\n\n    return Promise.resolve(signedTxBytes);\n  }\n\n  signAndSendTransaction(fromAddress, transaction, provider) {\n    let wallet = this._getWalletForAccount(fromAddress);\n\n    wallet = wallet.connect(provider);\n    transaction.setFrom(fromAddress);\n    const result = wallet.sendTransaction(transaction);\n    return Promise.resolve(result);\n  } // exportAccount should return a hex-encoded private key:\n\n\n  exportAccount(address) {\n    const wallet = this._getWalletForAccount(address);\n\n    return Promise.resolve(wallet.privateKey());\n  }\n\n  removeAccount(address) {\n    const addressLC = address.toLowerCase();\n\n    if (!this.wallets.map(w => w.getAddress().toLowerCase()).includes(addressLC)) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n\n    this.wallets = this.wallets.filter(w => w.getAddress().toLowerCase() !== addressLC);\n  }\n\n  getPrivateKeyFor(address) {\n    if (!address) {\n      throw new Error('Must specify address.');\n    }\n\n    const wallet = this._getWalletForAccount(address);\n\n    const privKey = wallet.privateKey();\n    return privKey;\n  }\n  /**\n   * @private\n   */\n\n\n  _getWalletForAccount(address) {\n    let wallet = this.wallets.find(w => w.getAddress() === address);\n\n    if (!wallet) {\n      throw new Error('Simple Keyring - Unable to find matching address.');\n    }\n\n    return wallet;\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nSimpleKeyring.type = Type;\nconst _default = SimpleKeyring;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Type, \"Type\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/keyrings/simple/index.js\");\n  reactHotLoader.register(SimpleKeyring, \"SimpleKeyring\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/keyrings/simple/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/keyrings/simple/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["dnerojs","EventEmitter","require","Type","SimpleKeyring","constructor","opts","type","wallets","deserialize","serialize","Promise","resolve","map","w","privateKey","privateKeys","reject","wallet","Wallet","e","addAccounts","n","newWallets","i","createRandom","push","concat","walletAddresses","getAddress","getAccounts","signTransaction","fromAddress","transaction","provider","_getWalletForAccount","connect","signedTxBytes","signAndSendTransaction","setFrom","result","sendTransaction","exportAccount","address","removeAccount","addressLC","toLowerCase","includes","Error","filter","getPrivateKeyFor","privKey","find"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/keyrings/simple/index.js"],"sourcesContent":["import * as dnerojs from '@dnerolabs/dnero-js';\n\nconst { EventEmitter } = require('events');\n\nconst Type = 'SimpleKeyring';\n\nclass SimpleKeyring extends EventEmitter{\n    constructor (opts) {\n        super();\n        this.type = Type;\n        this.wallets = [];\n        this.deserialize(opts);\n    }\n\n    serialize () {\n        return Promise.resolve(this.wallets.map((w) => w.privateKey));\n    }\n\n    deserialize (privateKeys = []) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.wallets = privateKeys.map((privateKey) => {\n                    const wallet = new dnerojs.Wallet(privateKey);\n                    return wallet;\n                });\n            } catch (e) {\n                reject(e);\n            }\n            resolve();\n        });\n    }\n\n    addAccounts (n = 1) {\n        const newWallets = [];\n        for (let i = 0; i < n; i++) {\n            const wallet = dnerojs.Wallet.createRandom(null);\n            newWallets.push(wallet);\n        }\n        this.wallets = this.wallets.concat(newWallets);\n        const walletAddresses = newWallets.map((w) => w.getAddress());\n        return Promise.resolve(walletAddresses);\n    }\n\n    getAccounts () {\n        return Promise.resolve(this.wallets.map((w) => w.getAddress()));\n    }\n\n    signTransaction (fromAddress, transaction, provider) {\n        let wallet = this._getWalletForAccount(fromAddress);\n        wallet = wallet.connect(provider);\n        const signedTxBytes = wallet.signTransaction(transaction);\n\n        // tx.sign(privKey);\n        return Promise.resolve(signedTxBytes);\n    }\n\n    signAndSendTransaction (fromAddress, transaction, provider) {\n        let wallet = this._getWalletForAccount(fromAddress);\n        wallet = wallet.connect(provider);\n        transaction.setFrom(fromAddress);\n        const result = wallet.sendTransaction(transaction);\n\n        return Promise.resolve(result);\n    }\n\n    // exportAccount should return a hex-encoded private key:\n    exportAccount (address) {\n        const wallet = this._getWalletForAccount(address);\n        return Promise.resolve(wallet.privateKey());\n    }\n\n    removeAccount (address) {\n        const addressLC = address.toLowerCase();\n        if (!this.wallets.map((w) => w.getAddress().toLowerCase()).includes(addressLC)) {\n            throw new Error(`Address ${address} not found in this keyring`);\n        }\n        this.wallets = this.wallets.filter((w) => w.getAddress().toLowerCase() !== addressLC);\n    }\n\n    getPrivateKeyFor (address) {\n        if (!address) {\n            throw new Error('Must specify address.');\n        }\n        const wallet = this._getWalletForAccount(address);\n        const privKey = wallet.privateKey();\n        return privKey;\n    }\n\n    /**\n     * @private\n     */\n    _getWalletForAccount (address) {\n        let wallet = this.wallets.find((w) => w.getAddress() === address);\n        if (!wallet) {\n            throw new Error('Simple Keyring - Unable to find matching address.');\n        }\n\n        return wallet;\n    }\n}\n\nSimpleKeyring.type = Type;\n\nexport default SimpleKeyring;\n"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,OAAZ,MAAyB,qBAAzB;;AAEA,MAAM;EAAEC;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AAEA,MAAMC,IAAI,GAAG,eAAb;;AAEA,MAAMC,aAAN,SAA4BH,YAA5B,CAAwC;EACpCI,WAAW,CAAEC,IAAF,EAAQ;IACf;IACA,KAAKC,IAAL,GAAYJ,IAAZ;IACA,KAAKK,OAAL,GAAe,EAAf;IACA,KAAKC,WAAL,CAAiBH,IAAjB;EACH;;EAEDI,SAAS,GAAI;IACT,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKJ,OAAL,CAAaK,GAAb,CAAkBC,CAAD,IAAOA,CAAC,CAACC,UAA1B,CAAhB,CAAP;EACH;;EAEDN,WAAW,GAAoB;IAAA,IAAlBO,WAAkB,uEAAJ,EAAI;IAC3B,OAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUK,MAAV,KAAqB;MACpC,IAAI;QACA,KAAKT,OAAL,GAAeQ,WAAW,CAACH,GAAZ,CAAiBE,UAAD,IAAgB;UAC3C,MAAMG,MAAM,GAAG,IAAIlB,OAAO,CAACmB,MAAZ,CAAmBJ,UAAnB,CAAf;UACA,OAAOG,MAAP;QACH,CAHc,CAAf;MAIH,CALD,CAKE,OAAOE,CAAP,EAAU;QACRH,MAAM,CAACG,CAAD,CAAN;MACH;;MACDR,OAAO;IACV,CAVM,CAAP;EAWH;;EAEDS,WAAW,GAAS;IAAA,IAAPC,CAAO,uEAAH,CAAG;IAChB,MAAMC,UAAU,GAAG,EAAnB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;MACxB,MAAMN,MAAM,GAAGlB,OAAO,CAACmB,MAAR,CAAeM,YAAf,CAA4B,IAA5B,CAAf;MACAF,UAAU,CAACG,IAAX,CAAgBR,MAAhB;IACH;;IACD,KAAKV,OAAL,GAAe,KAAKA,OAAL,CAAamB,MAAb,CAAoBJ,UAApB,CAAf;IACA,MAAMK,eAAe,GAAGL,UAAU,CAACV,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACe,UAAF,EAAtB,CAAxB;IACA,OAAOlB,OAAO,CAACC,OAAR,CAAgBgB,eAAhB,CAAP;EACH;;EAEDE,WAAW,GAAI;IACX,OAAOnB,OAAO,CAACC,OAAR,CAAgB,KAAKJ,OAAL,CAAaK,GAAb,CAAkBC,CAAD,IAAOA,CAAC,CAACe,UAAF,EAAxB,CAAhB,CAAP;EACH;;EAEDE,eAAe,CAAEC,WAAF,EAAeC,WAAf,EAA4BC,QAA5B,EAAsC;IACjD,IAAIhB,MAAM,GAAG,KAAKiB,oBAAL,CAA0BH,WAA1B,CAAb;;IACAd,MAAM,GAAGA,MAAM,CAACkB,OAAP,CAAeF,QAAf,CAAT;IACA,MAAMG,aAAa,GAAGnB,MAAM,CAACa,eAAP,CAAuBE,WAAvB,CAAtB,CAHiD,CAKjD;;IACA,OAAOtB,OAAO,CAACC,OAAR,CAAgByB,aAAhB,CAAP;EACH;;EAEDC,sBAAsB,CAAEN,WAAF,EAAeC,WAAf,EAA4BC,QAA5B,EAAsC;IACxD,IAAIhB,MAAM,GAAG,KAAKiB,oBAAL,CAA0BH,WAA1B,CAAb;;IACAd,MAAM,GAAGA,MAAM,CAACkB,OAAP,CAAeF,QAAf,CAAT;IACAD,WAAW,CAACM,OAAZ,CAAoBP,WAApB;IACA,MAAMQ,MAAM,GAAGtB,MAAM,CAACuB,eAAP,CAAuBR,WAAvB,CAAf;IAEA,OAAOtB,OAAO,CAACC,OAAR,CAAgB4B,MAAhB,CAAP;EACH,CAzDmC,CA2DpC;;;EACAE,aAAa,CAAEC,OAAF,EAAW;IACpB,MAAMzB,MAAM,GAAG,KAAKiB,oBAAL,CAA0BQ,OAA1B,CAAf;;IACA,OAAOhC,OAAO,CAACC,OAAR,CAAgBM,MAAM,CAACH,UAAP,EAAhB,CAAP;EACH;;EAED6B,aAAa,CAAED,OAAF,EAAW;IACpB,MAAME,SAAS,GAAGF,OAAO,CAACG,WAAR,EAAlB;;IACA,IAAI,CAAC,KAAKtC,OAAL,CAAaK,GAAb,CAAkBC,CAAD,IAAOA,CAAC,CAACe,UAAF,GAAeiB,WAAf,EAAxB,EAAsDC,QAAtD,CAA+DF,SAA/D,CAAL,EAAgF;MAC5E,MAAM,IAAIG,KAAJ,CAAW,WAAUL,OAAQ,4BAA7B,CAAN;IACH;;IACD,KAAKnC,OAAL,GAAe,KAAKA,OAAL,CAAayC,MAAb,CAAqBnC,CAAD,IAAOA,CAAC,CAACe,UAAF,GAAeiB,WAAf,OAAiCD,SAA5D,CAAf;EACH;;EAEDK,gBAAgB,CAAEP,OAAF,EAAW;IACvB,IAAI,CAACA,OAAL,EAAc;MACV,MAAM,IAAIK,KAAJ,CAAU,uBAAV,CAAN;IACH;;IACD,MAAM9B,MAAM,GAAG,KAAKiB,oBAAL,CAA0BQ,OAA1B,CAAf;;IACA,MAAMQ,OAAO,GAAGjC,MAAM,CAACH,UAAP,EAAhB;IACA,OAAOoC,OAAP;EACH;EAED;AACJ;AACA;;;EACIhB,oBAAoB,CAAEQ,OAAF,EAAW;IAC3B,IAAIzB,MAAM,GAAG,KAAKV,OAAL,CAAa4C,IAAb,CAAmBtC,CAAD,IAAOA,CAAC,CAACe,UAAF,OAAmBc,OAA5C,CAAb;;IACA,IAAI,CAACzB,MAAL,EAAa;MACT,MAAM,IAAI8B,KAAJ,CAAU,mDAAV,CAAN;IACH;;IAED,OAAO9B,MAAP;EACH;;EA5FmC;EAAA;IAAA;IAAA;EAAA;;AAAA;;AA+FxCd,aAAa,CAACG,IAAd,GAAqBJ,IAArB;iBAEeC,a;AAAf;;;;;;;;;;0BAnGMD,I;0BAEAC,a"},"metadata":{},"sourceType":"module"}