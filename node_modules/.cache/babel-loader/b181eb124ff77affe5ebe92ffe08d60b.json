{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport _ from 'lodash';\nimport React from 'react';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport './TxConfirmationModal.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport Modal from '../components/Modal';\nimport GradientButton from \"../components/buttons/GradientButton\";\nimport Wallet from '../services/Wallet';\nimport { approveTransactionRequest, rejectTransactionRequest } from \"../state/actions/Transactions\";\nimport { formatNativeTokenAmountToLargestUnit, formatDNC20TokenAmountToLargestUnit, transactionRequestToTransactionType, transactionTypeToName, truncate } from \"../utils/Utils\";\nimport { DefaultAssets, getAllAssets, tokenToAsset } from \"../constants/assets\";\nimport { DNC20ABI } from '../constants/contracts';\nimport FlatButton from \"../components/buttons/FlatButton\";\nimport { store } from \"../state\";\nimport MDSpinner from \"react-md-spinner\";\nimport BigNumber from \"bignumber.js\";\n\nconst renderDataRow = function (title, value) {\n  let suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let isLarge = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  suffix = suffix ? suffix : '';\n\n  if (value) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `TxDataRow ${isLarge ? 'TxDataRow--large' : ''}`,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxDataRow__title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxDataRow__value\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, value + suffix || ''));\n  }\n\n  return null;\n};\n\nexport class ConfirmTransactionModal extends React.Component {\n  constructor() {\n    super();\n\n    this.onConfirmClick = () => {\n      // TODO approve the request if the password matches\n      // this.props.dispatch(createSendTransaction(this.props.network, this.props.transaction, this.state.password));\n      const {\n        transactionRequest\n      } = this.props;\n      this.props.dispatch(approveTransactionRequest(transactionRequest.id, this.state.password));\n    };\n\n    this.onRejectClick = () => {\n      const {\n        transactionRequest\n      } = this.props;\n      this.props.dispatch(rejectTransactionRequest(transactionRequest.id));\n    };\n\n    this.renderDataRows = () => {\n      const {\n        selectedAddress,\n        transactionRequest,\n        assets\n      } = this.props;\n\n      const txType = _.get(transactionRequest, 'txType');\n\n      const txData = _.get(transactionRequest, 'txData');\n\n      const stakePurpose = _.get(transactionRequest, 'txData.purpose');\n\n      if (txType === dnerojs.constants.TxType.Send) {\n        const dneroWei = _.get(transactionRequest, 'txData.outputs[0].dneroWei', null);\n\n        const dtokenWei = _.get(transactionRequest, 'txData.outputs[0].dtokenWei', null);\n\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        }, renderDataRow('Transaction Type', transactionTypeToName(txType)), renderDataRow('From', truncate(selectedAddress)), renderDataRow('To', truncate(_.get(transactionRequest, 'txData.outputs[0].address'))), dneroWei && dneroWei !== '0' && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(dneroWei), ' DNERO'), dtokenWei && dtokenWei !== '0' && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(dtokenWei), ' DTOKEN'));\n      }\n\n      if (txType === dnerojs.constants.TxType.SmartContract) {\n        const transactionName = transactionRequestToTransactionType(transactionRequest);\n\n        const contractAddress = _.get(transactionRequest, 'txData.to', null);\n\n        const value = _.get(transactionRequest, 'txData.value');\n\n        const asset = _.find(assets, function (a) {\n          return a.contractAddress === contractAddress;\n        });\n\n        let transferToAddress = null;\n        let transferToValue = null;\n        let symbol = null;\n        let decimals = null;\n\n        try {\n          const contractData = _.get(txData, 'data');\n\n          const dnc20Contract = new dnerojs.Contract(null, DNC20ABI, null);\n          const data = dnc20Contract.interface.decodeFunctionData('transfer(address,uint256)', contractData);\n          transferToAddress = data[0];\n          transferToValue = data[1].toString();\n          symbol = asset && asset.symbol;\n          decimals = asset && asset.decimals;\n        } catch (e) {}\n\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }\n        }, renderDataRow('Transaction Type', transactionName), !_.isNil(contractAddress) && renderDataRow('Contract', truncate(_.get(transactionRequest, 'txData.to'))), renderDataRow('From', truncate(selectedAddress)), !_.isNil(transferToAddress) && renderDataRow('To', truncate(transferToAddress)), !_.isNil(transferToAddress) && symbol && transferToValue && renderDataRow('Token Amount', formatDNC20TokenAmountToLargestUnit(transferToValue, decimals), ` ${symbol}`), !_.isNil(value) && value > 0 && renderDataRow('Value', formatNativeTokenAmountToLargestUnit(value), ' DTOKEN'), renderDataRow('Data', _.get(transactionRequest, 'txData.data'), null, true));\n      }\n\n      if (txType === dnerojs.constants.TxType.WithdrawStake) {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }\n        }, renderDataRow('Transaction Type', transactionTypeToName(txType)), renderDataRow('From', truncate(selectedAddress)), renderDataRow('Holder', truncate(_.get(transactionRequest, 'txData.holder'))));\n      }\n\n      if (txType === dnerojs.constants.TxType.DepositStake) {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }\n        }, renderDataRow('Transaction Type', transactionTypeToName(txType)), renderDataRow('Purpose', 'Validator Node'), renderDataRow('From', truncate(selectedAddress)), renderDataRow('Holder', truncate(_.get(transactionRequest, 'txData.holder'))), renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DNERO'));\n      }\n\n      if (txType === dnerojs.constants.TxType.DepositStakeV2) {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }\n        }, renderDataRow('Transaction Type', transactionTypeToName(txType)), stakePurpose === dnerojs.constants.StakePurpose.StakeForEliteEdge && renderDataRow('Purpose', 'Edge Node'), stakePurpose === dnerojs.constants.StakePurpose.StakeForSentry && renderDataRow('Purpose', 'Sentry Node'), renderDataRow('From', truncate(selectedAddress)), renderDataRow('Holder summary', _.get(transactionRequest, 'txData.holderSummary'), null, true), stakePurpose === dnerojs.constants.StakePurpose.StakeForEliteEdge && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DTOKEN'), stakePurpose === dnerojs.constants.StakePurpose.StakeForSentry && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DNERO'));\n      }\n    };\n\n    this.calculateTotalGasPrice = () => {\n      var _transactionRequest$g;\n\n      const {\n        transactionRequest\n      } = this.props;\n\n      if (transactionRequest === null || transactionRequest === void 0 ? void 0 : (_transactionRequest$g = transactionRequest.gasFeeData) === null || _transactionRequest$g === void 0 ? void 0 : _transactionRequest$g.totalGasFee) {\n        const dependencyGasFee = new BigNumber(_.get(transactionRequest, ['dependencies', 0, 'gasFeeData', 'totalGasFee'], '0'));\n        return new BigNumber(transactionRequest.gasFeeData.totalGasFee || '0').plus(dependencyGasFee);\n      }\n    };\n\n    this.state = {\n      password: '',\n      estimatedGasFee: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    let name = event.target.name;\n    let value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {\n      transactionRequest\n    } = this.props;\n    let isValid = Wallet.getWalletHardware() || this.state.password.length > 0;\n    let txDataRows = this.renderDataRows();\n    let passwordRow = null;\n\n    if (!Wallet.getWalletHardware()) {\n      passwordRow = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TxConfirmationModal__password-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TxConfirmationModal__password-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, \"Enter your wallet password to sign this transaction\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"ChoosePasswordCard__password-input\",\n        placeholder: \"Enter wallet password\",\n        name: \"password\",\n        type: \"password\",\n        value: this.state.password,\n        onChange: this.handleChange.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      closeable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxConfirmationModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ModalTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }, \"Confirm Transaction\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'TxDataRows',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, txDataRows, /*#__PURE__*/React.createElement(\"div\", {\n      className: `TxDataRow`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxDataRow__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }, \"Estimated Gas Fee\"), _.isNil(transactionRequest === null || transactionRequest === void 0 ? void 0 : transactionRequest.gasFeeData) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxDataRow__value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(MDSpinner, {\n      singleColor: '#1BDED0',\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }\n    })), !_.isNil(transactionRequest === null || transactionRequest === void 0 ? void 0 : transactionRequest.gasFeeData) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TxDataRow__value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 37\n      }\n    }, `${formatNativeTokenAmountToLargestUnit(this.calculateTotalGasPrice())} DTOKEN`)))), passwordRow, /*#__PURE__*/React.createElement(\"div\", {\n      className: 'TxConfirmationModal__footer',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FlatButton, {\n      title: 'Reject',\n      className: 'ConfirmTransactionPage__reject-button',\n      size: 'large',\n      onClick: this.onRejectClick,\n      borderless: true,\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(GradientButton, {\n      title: 'Confirm',\n      className: 'ConfirmTransactionPage__confirm-button',\n      disabled: isValid === false,\n      onClick: this.onConfirmClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    dneroWallet\n  } = state;\n  const selectedAddress = dneroWallet.selectedAddress;\n  const identities = dneroWallet.identities;\n  const accounts = dneroWallet.accounts;\n  const transactionRequest = state.dneroWallet.transactionRequests[0];\n  const tokens = dneroWallet.tokens;\n  const chainId = dneroWallet.network.chainId;\n  return {\n    selectedAddress: selectedAddress,\n    selectedIdentity: identities[selectedAddress],\n    selectedAccount: accounts[selectedAddress],\n    assets: getAllAssets(chainId, tokens),\n    transactionRequest: transactionRequest\n  };\n};\n\nconst _default = connect(mapStateToProps)(ConfirmTransactionModal);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(renderDataRow, \"renderDataRow\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js\");\n  reactHotLoader.register(ConfirmTransactionModal, \"ConfirmTransactionModal\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["_","React","dnerojs","connect","Modal","GradientButton","Wallet","approveTransactionRequest","rejectTransactionRequest","formatNativeTokenAmountToLargestUnit","formatDNC20TokenAmountToLargestUnit","transactionRequestToTransactionType","transactionTypeToName","truncate","DefaultAssets","getAllAssets","tokenToAsset","DNC20ABI","FlatButton","store","MDSpinner","BigNumber","renderDataRow","title","value","suffix","isLarge","ConfirmTransactionModal","Component","constructor","onConfirmClick","transactionRequest","props","dispatch","id","state","password","onRejectClick","renderDataRows","selectedAddress","assets","txType","get","txData","stakePurpose","constants","TxType","Send","dneroWei","dtokenWei","SmartContract","transactionName","contractAddress","asset","find","a","transferToAddress","transferToValue","symbol","decimals","contractData","dnc20Contract","Contract","data","interface","decodeFunctionData","toString","e","isNil","WithdrawStake","DepositStake","DepositStakeV2","StakePurpose","StakeForEliteEdge","StakeForSentry","calculateTotalGasPrice","gasFeeData","totalGasFee","dependencyGasFee","plus","estimatedGasFee","handleChange","bind","event","name","target","setState","render","isValid","getWalletHardware","length","txDataRows","passwordRow","mapStateToProps","dneroWallet","identities","accounts","transactionRequests","tokens","chainId","network","selectedIdentity","selectedAccount"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/modals/ConfirmTransactionModal.js"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport './TxConfirmationModal.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport Modal from '../components/Modal'\nimport GradientButton from \"../components/buttons/GradientButton\";\nimport Wallet from '../services/Wallet'\nimport {\n    approveTransactionRequest,\n    rejectTransactionRequest\n} from \"../state/actions/Transactions\";\nimport {\n    formatNativeTokenAmountToLargestUnit, formatDNC20TokenAmountToLargestUnit,\n    transactionRequestToTransactionType,\n    transactionTypeToName, truncate\n} from \"../utils/Utils\";\nimport {DefaultAssets, getAllAssets, tokenToAsset} from \"../constants/assets\";\nimport {DNC20ABI} from '../constants/contracts';\nimport FlatButton from \"../components/buttons/FlatButton\";\nimport {store} from \"../state\";\nimport MDSpinner from \"react-md-spinner\";\nimport BigNumber from \"bignumber.js\";\n\n\nconst renderDataRow = (title, value, suffix = '', isLarge = false) => {\n    suffix = suffix ? suffix : '';\n\n    if(value){\n        return (\n            <div className={`TxDataRow ${isLarge ? 'TxDataRow--large' : ''}`}>\n                <div className=\"TxDataRow__title\">\n                    {title}\n                </div>\n                <div className=\"TxDataRow__value\">\n                    {value + suffix || ''}\n                </div>\n            </div>\n        );\n    }\n    return null;\n};\n\nexport class ConfirmTransactionModal extends React.Component {\n    constructor(){\n        super();\n\n        this.state = {\n            password: '',\n            estimatedGasFee: null\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        let name = event.target.name;\n        let value = event.target.value;\n\n        this.setState({[name]: value});\n    }\n\n    onConfirmClick = () => {\n        // TODO approve the request if the password matches\n        // this.props.dispatch(createSendTransaction(this.props.network, this.props.transaction, this.state.password));\n        const {transactionRequest} = this.props;\n        this.props.dispatch(approveTransactionRequest(transactionRequest.id, this.state.password));\n    }\n\n    onRejectClick = () => {\n        const {transactionRequest} = this.props;\n        this.props.dispatch(rejectTransactionRequest(transactionRequest.id));\n    }\n\n    renderDataRows = () => {\n        const {selectedAddress, transactionRequest, assets} = this.props;\n        const txType = _.get(transactionRequest, 'txType');\n        const txData = _.get(transactionRequest, 'txData');\n        const stakePurpose = _.get(transactionRequest, 'txData.purpose');\n\n        if(txType === dnerojs.constants.TxType.Send){\n            const dneroWei = _.get(transactionRequest, 'txData.outputs[0].dneroWei', null);\n            const dtokenWei = _.get(transactionRequest, 'txData.outputs[0].dtokenWei', null);\n\n            return (\n                <React.Fragment>\n                    { renderDataRow('Transaction Type', transactionTypeToName(txType)) }\n                    { renderDataRow('From', truncate(selectedAddress)) }\n                    { renderDataRow('To', truncate(_.get(transactionRequest, 'txData.outputs[0].address'))) }\n                    { dneroWei && (dneroWei !== '0') && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(dneroWei), ' DNERO') }\n                    { dtokenWei && (dtokenWei !== '0') && renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(dtokenWei), ' DTOKEN') }\n                </React.Fragment>\n            );\n        }\n        if(txType === dnerojs.constants.TxType.SmartContract){\n            const transactionName = transactionRequestToTransactionType(transactionRequest);\n            const contractAddress = _.get(transactionRequest, 'txData.to', null);\n            const value = _.get(transactionRequest, 'txData.value');\n            const asset = _.find(assets, function (a) {\n                return a.contractAddress === contractAddress;\n            });\n            let transferToAddress = null;\n            let transferToValue = null;\n            let symbol = null;\n            let decimals = null;\n\n            try {\n                const contractData = _.get(txData, 'data');\n                const dnc20Contract = new dnerojs.Contract(null, DNC20ABI, null);\n                const data = dnc20Contract.interface.decodeFunctionData('transfer(address,uint256)',contractData);\n                transferToAddress = data[0];\n                transferToValue = data[1].toString();\n                symbol = asset && asset.symbol;\n                decimals = asset && asset.decimals;\n            }\n            catch (e) {\n\n            }\n\n            return (\n                <React.Fragment>\n                    { renderDataRow('Transaction Type', transactionName) }\n                    { !_.isNil(contractAddress) && renderDataRow('Contract', truncate(_.get(transactionRequest, 'txData.to'))) }\n                    { renderDataRow('From', truncate(selectedAddress)) }\n                    { !_.isNil(transferToAddress) && renderDataRow('To', truncate(transferToAddress)) }\n                    { (!_.isNil(transferToAddress) && symbol && transferToValue) && renderDataRow('Token Amount', formatDNC20TokenAmountToLargestUnit(transferToValue, decimals), ` ${symbol}`) }\n                    { (!_.isNil(value) && value > 0) && renderDataRow('Value', formatNativeTokenAmountToLargestUnit(value), ' DTOKEN') }\n                    { renderDataRow('Data', _.get(transactionRequest, 'txData.data'), null, true) }\n\n                </React.Fragment>\n            );\n        }\n        if(txType === dnerojs.constants.TxType.WithdrawStake){\n            return (\n                <React.Fragment>\n                    { renderDataRow('Transaction Type', transactionTypeToName(txType)) }\n                    { renderDataRow('From', truncate(selectedAddress)) }\n                    { renderDataRow('Holder', truncate(_.get(transactionRequest, 'txData.holder'))) }\n                </React.Fragment>\n            );\n        }\n        if(txType === dnerojs.constants.TxType.DepositStake){\n            return (\n                <React.Fragment>\n                    { renderDataRow('Transaction Type', transactionTypeToName(txType)) }\n                    { renderDataRow('Purpose', 'Validator Node') }\n                    { renderDataRow('From', truncate(selectedAddress)) }\n                    { renderDataRow('Holder', truncate(_.get(transactionRequest, 'txData.holder'))) }\n                    { renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DNERO') }\n                </React.Fragment>\n            );\n        }\n        if(txType === dnerojs.constants.TxType.DepositStakeV2){\n            return (\n                <React.Fragment>\n                    { renderDataRow('Transaction Type', transactionTypeToName(txType)) }\n                    {\n                        (stakePurpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) &&\n                        renderDataRow('Purpose', 'Edge Node')\n                    }\n                    {\n                        (stakePurpose === dnerojs.constants.StakePurpose.StakeForSentry) &&\n                        renderDataRow('Purpose', 'Sentry Node')\n                    }\n                    { renderDataRow('From', truncate(selectedAddress)) }\n                    { renderDataRow('Holder summary', _.get(transactionRequest, 'txData.holderSummary'), null, true) }\n                    {\n                        (stakePurpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) &&\n                        renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DTOKEN')\n                    }\n                    {\n                        (stakePurpose === dnerojs.constants.StakePurpose.StakeForSentry) &&\n                        renderDataRow('Amount', formatNativeTokenAmountToLargestUnit(_.get(transactionRequest, 'txData.amount')), ' DNERO')\n                    }\n                </React.Fragment>\n            );\n        }\n    };\n\n    calculateTotalGasPrice = () => {\n        const {transactionRequest} = this.props;\n\n        if(transactionRequest?.gasFeeData?.totalGasFee){\n            const dependencyGasFee = new BigNumber(_.get(transactionRequest, ['dependencies', 0, 'gasFeeData', 'totalGasFee'], '0'));\n\n            return (new BigNumber(transactionRequest.gasFeeData.totalGasFee || '0')).plus(dependencyGasFee);\n        }\n    }\n\n    render() {\n        const {transactionRequest} = this.props;\n        let isValid = Wallet.getWalletHardware() || this.state.password.length > 0;\n        let txDataRows = this.renderDataRows();\n        let passwordRow = null;\n\n        if(!Wallet.getWalletHardware()){\n            passwordRow = (\n                <div className=\"TxConfirmationModal__password-container\">\n                    <div className=\"TxConfirmationModal__password-title\">Enter your wallet password to sign this transaction</div>\n                    <input className=\"ChoosePasswordCard__password-input\"\n                           placeholder=\"Enter wallet password\"\n                           name=\"password\"\n                           type=\"password\"\n                           value={this.state.password}\n                           onChange={this.handleChange.bind(this)}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Modal closeable={false}>\n                <div className=\"TxConfirmationModal\">\n                    <div className=\"ModalTitle\">\n                        Confirm Transaction\n                    </div>\n\n                    <div className={'TxDataRows'}>\n                        {\n                            txDataRows\n                        }\n                        <div className={`TxDataRow`}>\n                            <div className=\"TxDataRow__title\">\n                                Estimated Gas Fee\n                            </div>\n                            {\n                                _.isNil(transactionRequest?.gasFeeData) &&\n                                <div className=\"TxDataRow__value\">\n                                    <MDSpinner singleColor={'#1BDED0'} size={20}/>\n                                </div>\n                            }\n                            {\n                                !_.isNil(transactionRequest?.gasFeeData) &&\n                                <div className=\"TxDataRow__value\">\n                                    <span>{`${formatNativeTokenAmountToLargestUnit(this.calculateTotalGasPrice())} DTOKEN`}</span>\n                                </div>\n                            }\n                        </div>\n                    </div>\n\n                    { passwordRow }\n\n                    <div className={'TxConfirmationModal__footer'}>\n                        <FlatButton title={'Reject'}\n                                    className={'ConfirmTransactionPage__reject-button'}\n                                    size={'large'}\n                                    onClick={this.onRejectClick}\n                                    borderless centered/>\n                        <GradientButton title={'Confirm'}\n                                        className={'ConfirmTransactionPage__confirm-button'}\n                                        disabled={isValid === false}\n                                        onClick={this.onConfirmClick}\n                        />\n                    </div>\n\n                </div>\n            </Modal>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const { dneroWallet } = state;\n    const selectedAddress = dneroWallet.selectedAddress;\n    const identities = dneroWallet.identities;\n    const accounts = dneroWallet.accounts;\n    const transactionRequest = state.dneroWallet.transactionRequests[0];\n    const tokens = dneroWallet.tokens;\n    const chainId = dneroWallet.network.chainId;\n\n    return {\n        selectedAddress: selectedAddress,\n        selectedIdentity: identities[selectedAddress],\n        selectedAccount: accounts[selectedAddress],\n        assets: getAllAssets(chainId, tokens),\n        transactionRequest: transactionRequest,\n    };\n};\n\nexport default connect(mapStateToProps)(ConfirmTransactionModal);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}