{"ast":null,"code":"var _jsxFileName = \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/SendTxForm.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport _ from 'lodash';\nimport FormField from '../../components/FormField';\nimport { isValidAmount, getAssetBalance, toNativeTokenLargestUnit, toDNC20TokenLargestUnit } from '../../utils/Utils';\nimport { Urls } from '../../constants';\nimport Warning from '../../components/Warning';\nimport * as dnerojs from \"@dnerolabs/dnero-js\";\nimport BigNumber from \"bignumber.js\";\nimport { DTokenAsset, DneroAsset } from \"../../constants/assets\";\nimport FlatButton from \"../buttons/FlatButton\";\nexport default function SendTxForm(props) {\n  const {\n    onSubmit,\n    defaultValues,\n    selectedAccount,\n    formRef,\n    assets\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    setValue\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: defaultValues || {\n      to: '',\n      amount: '',\n      assetId: ''\n    }\n  });\n  const assetId = watch('assetId');\n\n  const populateMaxAmount = () => {\n    if (_.isEmpty(assetId)) {\n      return;\n    }\n\n    let amount = '';\n\n    const asset = _.find(assets, function (a) {\n      return a.id === assetId;\n    });\n\n    if (assetId === DTokenAsset.id) {\n      const maxDtokenBN = new BigNumber(selectedAccount.balances['dtokenwei']).minus(dnerojs.constants.gasPriceDefault);\n      amount = toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);\n    } else if (assetId === DneroAsset.id) {\n      amount = toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);\n    } else {\n      const balance = selectedAccount.balances[asset.address] || '0';\n      amount = toDNC20TokenLargestUnit(balance, asset.decimals).toString(10);\n    }\n\n    setValue('amount', amount);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: 'TxForm TxForm--Send',\n    onSubmit: handleSubmit(onSubmit),\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    title: 'To',\n    error: errors.to && 'A valid address is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"to\",\n    className: 'RoundedInput',\n    placeholder: 'Enter address',\n    ref: register({\n      required: true,\n      validate: s => ethers.utils.isAddress(s)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    title: 'Asset',\n    error: errors.assetId && 'Asset is required',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: 'RoundedInput',\n    name: 'assetId',\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: '__placeholder__',\n    value: '',\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Select asset\"), assets.map(asset => /*#__PURE__*/React.createElement(\"option\", {\n    key: asset.symbol,\n    value: asset.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }, `${asset.symbol} (${getAssetBalance(selectedAccount, asset)})`)))), /*#__PURE__*/React.createElement(FormField, {\n    title: 'Amount',\n    error: errors.amount && errors.amount.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'RoundedInputWrapper',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"amount\",\n    className: 'RoundedInput',\n    placeholder: 'Enter amount',\n    type: 'number',\n    ref: register({\n      required: {\n        value: true,\n        message: 'Amount is required'\n      },\n      validate: {\n        sufficientBalance: s => {\n          const asset = _.find(assets, function (a) {\n            return a.id === assetId;\n          });\n\n          const isValid = isValidAmount(selectedAccount, asset, s);\n          return isValid ? true : 'Insufficient balance';\n        },\n        moreThanZero: s => {\n          const f = parseFloat(s);\n          return f > 0 ? true : 'Invalid amount';\n        }\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FlatButton, {\n    title: 'Max',\n    size: 'small',\n    className: 'RoundedInputButton',\n    onClick: populateMaxAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Warning, {\n    message: 'Do not send to Ethereum/ERC20 addresses.',\n    learnMoreHref: Urls.PreventingLostTokens,\n    style: {\n      maxWidth: '250px',\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }));\n}\n\n__signature__(SendTxForm, \"useForm{{register, handleSubmit, errors, watch, setValue}}\", () => [useForm]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(SendTxForm, \"SendTxForm\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/SendTxForm.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["React","useForm","ethers","_","FormField","isValidAmount","getAssetBalance","toNativeTokenLargestUnit","toDNC20TokenLargestUnit","Urls","Warning","dnerojs","BigNumber","DTokenAsset","DneroAsset","FlatButton","SendTxForm","props","onSubmit","defaultValues","selectedAccount","formRef","assets","register","handleSubmit","errors","watch","setValue","mode","to","amount","assetId","populateMaxAmount","isEmpty","asset","find","a","id","maxDtokenBN","balances","minus","constants","gasPriceDefault","toString","balance","address","decimals","required","validate","s","utils","isAddress","map","symbol","message","value","sufficientBalance","isValid","moreThanZero","f","parseFloat","PreventingLostTokens","maxWidth","marginBottom"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/SendTxForm.js"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport _ from 'lodash';\nimport FormField from '../../components/FormField';\nimport {\n    isValidAmount, getAssetBalance, toNativeTokenLargestUnit, toDNC20TokenLargestUnit\n} from '../../utils/Utils';\nimport {Urls} from '../../constants';\nimport Warning from '../../components/Warning';\nimport * as dnerojs from \"@dnerolabs/dnero-js\";\nimport BigNumber from \"bignumber.js\";\nimport {DTokenAsset, DneroAsset} from \"../../constants/assets\";\nimport FlatButton from \"../buttons/FlatButton\";\n\nexport default function SendTxForm(props){\n    const {onSubmit, defaultValues, selectedAccount, formRef, assets} = props;\n    const {register, handleSubmit, errors, watch, setValue} = useForm({\n        mode: 'onChange',\n        defaultValues: defaultValues || {\n            to: '',\n            amount: '',\n            assetId: ''\n        }\n    });\n    const assetId = watch('assetId');\n    const populateMaxAmount = () => {\n        if(_.isEmpty(assetId)){\n            return;\n        }\n\n        let amount = '';\n        const asset = _.find(assets, function (a) {\n            return a.id === assetId;\n        });\n\n        if(assetId === DTokenAsset.id){\n            const maxDtokenBN = (new BigNumber(selectedAccount.balances['dtokenwei'])).minus(dnerojs.constants.gasPriceDefault);\n            amount = toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);\n        }\n        else if (assetId === DneroAsset.id){\n            amount = toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);\n        }\n        else{\n            const balance = selectedAccount.balances[asset.address] || '0';\n            amount = toDNC20TokenLargestUnit(balance, asset.decimals).toString(10);\n        }\n\n        setValue('amount', amount);\n    }\n\n    return (\n        <form className={'TxForm TxForm--Send'}\n              onSubmit={handleSubmit(onSubmit)}\n              ref={formRef}\n        >\n            <FormField title={'To'}\n                       error={(errors.to && 'A valid address is required')}\n            >\n                <input name=\"to\"\n                       className={'RoundedInput'}\n                       placeholder={'Enter address'}\n                       ref={register({\n                           required: true,\n                           validate: (s) => ethers.utils.isAddress(s)\n                       })} />\n            </FormField>\n\n            <FormField title={'Asset'}\n                       error={errors.assetId && 'Asset is required'}\n            >\n                <select\n                    className={'RoundedInput'}\n                    name={'assetId'}\n                    ref={register({ required: true })}\n                >\n                    <option key={'__placeholder__'}\n                            value={''}\n                            disabled>\n                        Select asset\n                    </option>\n                    {\n                        assets.map((asset) => (\n                            <option key={asset.symbol}\n                                    value={asset.id}>\n                                {`${asset.symbol} (${getAssetBalance(selectedAccount, asset)})`}\n                            </option>\n                        ))\n                    }\n                </select>\n            </FormField>\n\n            <FormField title={'Amount'}\n                       error={errors.amount && errors.amount.message}\n            >\n                <div className={'RoundedInputWrapper'}>\n                    <input name=\"amount\"\n                           className={'RoundedInput'}\n                           placeholder={'Enter amount'}\n                           type={'number'}\n                           ref={register({\n                               required: {\n                                   value: true,\n                                   message: 'Amount is required'\n                               },\n                               validate: {\n                                   sufficientBalance: (s) => {\n                                       const asset = _.find(assets, function (a) {\n                                           return a.id === assetId;\n                                       });\n                                       const isValid = isValidAmount(selectedAccount, asset, s);\n\n                                       return isValid ? true : 'Insufficient balance';\n                                   },\n                                   moreThanZero: (s) => {\n                                       const f = parseFloat(s);\n\n                                       return (f > 0) ? true : 'Invalid amount';\n                                   }\n                               }})} />\n                    <FlatButton title={'Max'}\n                                size={'small'}\n                                className={'RoundedInputButton'}\n                                onClick={populateMaxAmount}/>\n                </div>\n            </FormField>\n\n            <Warning message={'Do not send to Ethereum/ERC20 addresses.'}\n                     learnMoreHref={Urls.PreventingLostTokens}\n                     style={{\n                         maxWidth: '250px',\n                         marginBottom: 10\n                     }}\n            />\n\n        </form>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}