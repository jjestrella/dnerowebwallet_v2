{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport DneroJS from '../libs/dnerojs.esm';\nimport TrezorConnect from 'trezor-connect';\nimport Web3 from 'web3';\nimport Wallet from './Wallet';\nimport Dnero from \"./Dnero.js\";\nconst rpcURL = \"https://mainnet.infura.io/v3/40980e2189924c8abfc5f60dd2e5dc4b\";\nconst web3 = new Web3(rpcURL);\nexport default class Trezor {\n  static async signTransaction(unsignedTx) {\n    let payload = Dnero.prepareTxPayload(unsignedTx);\n    const trezorSignParams = {\n      path: Wallet.getWalletPath(),\n      transaction: {\n        chainId: 1,\n        nonce: web3.utils.toHex('0'),\n        gasPrice: web3.utils.toHex('0'),\n        gasLimit: web3.utils.toHex('0'),\n        to: \"0000000000000000000000000000000000000000\",\n        value: web3.utils.toHex('0'),\n        data: payload\n      }\n    };\n    const signedTx = await TrezorConnect.ethereumSignTransaction(trezorSignParams);\n\n    if (signedTx.payload.error) {\n      throw signedTx.payload.error;\n    }\n\n    let signature = signedTx.payload.r + signedTx.payload.s.slice(2) + (parseInt(signedTx.payload.v, 16) - 37).toString().padStart(2, '0');\n    unsignedTx.setSignature(signature);\n    let signedRawTxBytes = DneroJS.TxSigner.serializeTx(unsignedTx);\n    let signedTxRaw = signedRawTxBytes.toString('hex'); //Remove the '0x' until the RPC endpoint supports '0x' prefixes\n    // signedTxRaw = signedTxRaw.substring(2);\n\n    if (signedTxRaw) {\n      return signedTxRaw;\n    } else {\n      throw new Error(\"Failed to sign transaction.\");\n    }\n  }\n\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(rpcURL, \"rpcURL\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/services/Trezor.js\");\n  reactHotLoader.register(web3, \"web3\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/services/Trezor.js\");\n  reactHotLoader.register(Trezor, \"Trezor\", \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/services/Trezor.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["DneroJS","TrezorConnect","Web3","Wallet","Dnero","rpcURL","web3","Trezor","signTransaction","unsignedTx","payload","prepareTxPayload","trezorSignParams","path","getWalletPath","transaction","chainId","nonce","utils","toHex","gasPrice","gasLimit","to","value","data","signedTx","ethereumSignTransaction","error","signature","r","s","slice","parseInt","v","toString","padStart","setSignature","signedRawTxBytes","TxSigner","serializeTx","signedTxRaw","Error"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/services/Trezor.js"],"sourcesContent":["import DneroJS from '../libs/dnerojs.esm';\nimport TrezorConnect from 'trezor-connect';\nimport Web3 from 'web3';\nimport Wallet from './Wallet'\nimport Dnero from \"./Dnero.js\"\n\nconst rpcURL = \"https://mainnet.infura.io/v3/40980e2189924c8abfc5f60dd2e5dc4b\";\nconst web3 = new Web3(rpcURL);\n\nexport default class Trezor {\n    static async signTransaction(unsignedTx){\n        let payload = Dnero.prepareTxPayload(unsignedTx);\n\n        const trezorSignParams = {\n            path: Wallet.getWalletPath(),\n            transaction: {\n                chainId: 1,\n                nonce: web3.utils.toHex('0'),\n                gasPrice: web3.utils.toHex('0'),\n                gasLimit: web3.utils.toHex('0'),\n                to: \"0000000000000000000000000000000000000000\",\n                value: web3.utils.toHex('0'),\n                data: payload,\n            },\n        };\n        const signedTx = await TrezorConnect.ethereumSignTransaction(trezorSignParams);\n        if (signedTx.payload.error) {\n            throw signedTx.payload.error;\n        }\n        let signature = signedTx.payload.r + signedTx.payload.s.slice(2) + (parseInt(signedTx.payload.v, 16) - 37).toString().padStart(2, '0');\n        unsignedTx.setSignature(signature);\n        let signedRawTxBytes = DneroJS.TxSigner.serializeTx(unsignedTx);\n        let signedTxRaw = signedRawTxBytes.toString('hex');\n\n        //Remove the '0x' until the RPC endpoint supports '0x' prefixes\n        // signedTxRaw = signedTxRaw.substring(2);\n\n        if(signedTxRaw){\n            return signedTxRaw;\n        }\n        else{\n            throw new Error(\"Failed to sign transaction.\");\n        }\n    }\n}\n"],"mappings":";;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,MAAMC,MAAM,GAAG,+DAAf;AACA,MAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAASG,MAAT,CAAb;AAEA,eAAe,MAAME,MAAN,CAAa;EACI,aAAfC,eAAe,CAACC,UAAD,EAAY;IACpC,IAAIC,OAAO,GAAGN,KAAK,CAACO,gBAAN,CAAuBF,UAAvB,CAAd;IAEA,MAAMG,gBAAgB,GAAG;MACrBC,IAAI,EAAEV,MAAM,CAACW,aAAP,EADe;MAErBC,WAAW,EAAE;QACTC,OAAO,EAAE,CADA;QAETC,KAAK,EAAEX,IAAI,CAACY,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAFE;QAGTC,QAAQ,EAAEd,IAAI,CAACY,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAHD;QAITE,QAAQ,EAAEf,IAAI,CAACY,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAJD;QAKTG,EAAE,EAAE,0CALK;QAMTC,KAAK,EAAEjB,IAAI,CAACY,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CANE;QAOTK,IAAI,EAAEd;MAPG;IAFQ,CAAzB;IAYA,MAAMe,QAAQ,GAAG,MAAMxB,aAAa,CAACyB,uBAAd,CAAsCd,gBAAtC,CAAvB;;IACA,IAAIa,QAAQ,CAACf,OAAT,CAAiBiB,KAArB,EAA4B;MACxB,MAAMF,QAAQ,CAACf,OAAT,CAAiBiB,KAAvB;IACH;;IACD,IAAIC,SAAS,GAAGH,QAAQ,CAACf,OAAT,CAAiBmB,CAAjB,GAAqBJ,QAAQ,CAACf,OAAT,CAAiBoB,CAAjB,CAAmBC,KAAnB,CAAyB,CAAzB,CAArB,GAAmD,CAACC,QAAQ,CAACP,QAAQ,CAACf,OAAT,CAAiBuB,CAAlB,EAAqB,EAArB,CAAR,GAAmC,EAApC,EAAwCC,QAAxC,GAAmDC,QAAnD,CAA4D,CAA5D,EAA+D,GAA/D,CAAnE;IACA1B,UAAU,CAAC2B,YAAX,CAAwBR,SAAxB;IACA,IAAIS,gBAAgB,GAAGrC,OAAO,CAACsC,QAAR,CAAiBC,WAAjB,CAA6B9B,UAA7B,CAAvB;IACA,IAAI+B,WAAW,GAAGH,gBAAgB,CAACH,QAAjB,CAA0B,KAA1B,CAAlB,CAtBoC,CAwBpC;IACA;;IAEA,IAAGM,WAAH,EAAe;MACX,OAAOA,WAAP;IACH,CAFD,MAGI;MACA,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;IACH;EACJ;;AAlCuB;;;;;;;;;;0BAHtBpC,M;0BACAC,I;0BAEeC,M"},"metadata":{},"sourceType":"module"}